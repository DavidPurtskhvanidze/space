if (!("ace" in window)) {
    window.ace = {};
}
jQuery(function($) {
    /** @type {string} */
    window.ace.click_event = $.fn.tap ? "tap" : "click";
});
jQuery(function(dataAndEvents) {
    ace.handle_side_menu(jQuery);
    ace.enable_search_ahead(jQuery);
    ace.general_things(jQuery);
    ace.widget_boxes(jQuery);
    ace.widget_reload_handler(jQuery);
});
/**
 * @param {Object} $
 * @return {undefined}
 */
ace.handle_side_menu = function($) {
    $("#menu-toggler").on(ace.click_event, function() {
        $("#sidebar").toggleClass("display");
        $(this).toggleClass("display");
        return false;
    });
    var sidebar_collapsed = $("#sidebar").hasClass("menu-min");
    $("#sidebar-collapse").on(ace.click_event, function() {
        sidebar_collapsed = $("#sidebar").hasClass("menu-min");
        ace.settings.sidebar_collapsed(!sidebar_collapsed);
    });
    /** @type {boolean} */
    var isTouch = "ontouchend" in document;
    $(".nav-list").on(ace.click_event, function(event) {
        var elm = $(event.target).closest("a");
        if (!elm || elm.length == 0) {
            return;
        }
        sidebar_collapsed = $("#sidebar").hasClass("menu-min");
        if (!elm.hasClass("dropdown-toggle")) {
            if (sidebar_collapsed && (ace.click_event == "tap" && elm.get(0).parentNode.parentNode == this)) {
                var target = elm.find(".menu-text").get(0);
                if (event.target != target && !$.contains(target, event.target)) {
                    return false;
                }
            }
            return;
        }
        var e = elm.next().get(0);
        if (!$(e).is(":visible")) {
            var li = $(e.parentNode).closest("ul");
            if (sidebar_collapsed && li.hasClass("nav-list")) {
                return;
            }
            li.find("> .open > .submenu").each(function() {
                if (this != e && !$(this.parentNode).hasClass("active")) {
                    $(this).slideUp(200).parent().removeClass("open");
                }
            });
        } else {
        }
        if (sidebar_collapsed && $(e.parentNode.parentNode).hasClass("nav-list")) {
            return false;
        }
        $(e).slideToggle(200).parent().toggleClass("open");
        return false;
    });
};
/**
 * @param {?} $
 * @return {undefined}
 */
ace.general_things = function($) {
    $('.ace-nav [class*="icon-animated-"]').closest("a").on("click", function() {
        var b = $(this).find('[class*="icon-animated-"]').eq(0);
        var d = b.attr("class").match(/icon\-animated\-([\d\w]+)/);
        b.removeClass(d[0]);
        $(this).off("click");
    });
    /*$(".nav-list .badge[title],.nav-list .label[title]").tooltip({
        placement : "right"
    });*/
    $("#ace-settings-btn").on(ace.click_event, function() {
        $(this).toggleClass("open");
        $("#ace-settings-box").toggleClass("open");
    });
    $("#ace-settings-navbar").on("click", function() {
        ace.settings.navbar_fixed(this.checked);
    }).each(function() {
            this.checked = ace.settings.is("navbar", "fixed");
        });
    $("#ace-settings-sidebar").on("click", function() {
        ace.settings.sidebar_fixed(this.checked);
    }).each(function() {
            this.checked = ace.settings.is("sidebar", "fixed");
        });
    $("#ace-settings-breadcrumbs").on("click", function() {
        ace.settings.breadcrumbs_fixed(this.checked);
    }).each(function() {
            this.checked = ace.settings.is("breadcrumbs", "fixed");
        });
    $("#ace-settings-add-container").on("click", function() {
        ace.settings.main_container_fixed(this.checked);
    }).each(function() {
            this.checked = ace.settings.is("main-container", "fixed");
        });
    $("#ace-settings-rtl").removeAttr("checked").on("click", function() {
        ace.switch_direction(jQuery);
    });
    $("#btn-scroll-up").on(ace.click_event, function() {
        /** @type {number} */
        var _duration = Math.min(400, Math.max(100, parseInt($("html").scrollTop() / 3)));
        $("html,body").animate({
            scrollTop : 0
        }, _duration);
        return false;
    });
    try {
        $("#skin-colorpicker").ace_colorpicker();
    } catch (b) {
    }
    $("#skin-colorpicker").on("change", function() {
        var activeClassName = $(this).find("option:selected").data("skin");
        var element = $(document.body);
        element.removeClass("skin-1 skin-2 skin-3");
        if (activeClassName != "default") {
            element.addClass(activeClassName);
        }
        if (activeClassName == "skin-1") {
            $(".ace-nav > li.grey").addClass("dark");
        } else {
            $(".ace-nav > li.grey").removeClass("dark");
        }
        if (activeClassName == "skin-2") {
            $(".ace-nav > li").addClass("no-border margin-1");
            $(".ace-nav > li:not(:last-child)").addClass("light-pink").find('> a > [class*="icon-"]').addClass("pink").end().eq(0).find(".badge").addClass("badge-warning");
        } else {
            $(".ace-nav > li").removeClass("no-border margin-1");
            $(".ace-nav > li:not(:last-child)").removeClass("light-pink").find('> a > [class*="icon-"]').removeClass("pink").end().eq(0).find(".badge").removeClass("badge-warning");
        }
        if (activeClassName == "skin-3") {
            $(".ace-nav > li.grey").addClass("red").find(".badge").addClass("badge-yellow");
        } else {
            $(".ace-nav > li.grey").removeClass("red").find(".badge").removeClass("badge-yellow");
        }
    });
};
/**
 * @param {Event} $
 * @return {undefined}
 */
ace.widget_boxes = function($) {
    $(document).on("hide.bs.collapse show.bs.collapse", function(e) {
        var targetNode = e.target.getAttribute("id");
        $('[href*="#' + targetNode + '"]').find('[class*="icon-"]').each(function() {
            var $this = $(this);
            var icon;
            /** @type {null} */
            var active = null;
            /** @type {null} */
            var klass = null;
            if (active = $this.attr("data-icon-show")) {
                klass = $this.attr("data-icon-hide");
            } else {
                if (icon = $this.attr("class").match(/icon\-(.*)\-(up|down)/)) {
                    /** @type {string} */
                    active = "icon-" + icon[1] + "-down";
                    /** @type {string} */
                    klass = "icon-" + icon[1] + "-up";
                }
            }
            if (active) {
                if (e.type == "show") {
                    $this.removeClass(active).addClass(klass);
                } else {
                    $this.removeClass(klass).addClass(active);
                }
                return false;
            }
        });
    });
    $(document).on("click.ace.widget", "[data-action]", function(types) {
        types.preventDefault();
        var $self = $(this);
        var graph = $self.data("action");
        var self = $self.closest(".widget-box");
        if (self.hasClass("ui-sortable-helper")) {
            return;
        }
        if (graph == "collapse") {
            /** @type {string} */
            var action = self.hasClass("collapsed") ? "show" : "hide";
            /** @type {string} */
            var eventName = action == "show" ? "shown" : "hidden";
            var e;
            self.trigger(e = $.Event(action + ".ace.widget"));
            if (e.isDefaultPrevented()) {
                return;
            }
            var el = self.find(".widget-body");
            var $this = $self.find("[class*=icon-]").eq(0);
            var icon = $this.attr("class").match(/icon\-(.*)\-(up|down)/);
            /** @type {string} */
            var klass = "icon-" + icon[1] + "-down";
            /** @type {string} */
            var active = "icon-" + icon[1] + "-up";
            var set = el.find(".widget-body-inner");
            if (set.length == 0) {
                el = el.wrapInner('<div class="widget-body-inner"></div>').find(":first-child").eq(0);
            } else {
                el = set.eq(0);
            }
            /** @type {number} */
            var animation = 300;
            /** @type {number} */
            var duration = 200;
            if (action == "show") {
                if ($this) {
                    $this.addClass(active).removeClass(klass);
                }
                self.removeClass("collapsed");
                el.slideUp(0, function() {
                    el.slideDown(animation, function() {
                        self.trigger(e = $.Event(eventName + ".ace.widget"));
                    });
                });
            } else {
                if ($this) {
                    $this.addClass(klass).removeClass(active);
                }
                el.slideUp(duration, function() {
                    self.addClass("collapsed");
                    self.trigger(e = $.Event(eventName + ".ace.widget"));
                });
            }
        } else {
            if (graph == "close") {
                console.log("OK");

                self.trigger(e = $.Event("close.ace.widget"));
                if (e.isDefaultPrevented()) {
                    return;
                }
                /** @type {number} */
                var event = parseInt($self.data("close-speed")) || 300;
                self.hide(event, function() {
                    self.trigger(e = $.Event("closed.ace.widget"));
                    self.remove();
                });
            } else {
                if (graph == "reload") {
                    self.trigger(e = $.Event("reload.ace.widget"));
                    if (e.isDefaultPrevented()) {
                        return;
                    }
                    $self.blur();
                    /** @type {boolean} */
                    var q = false;
                    if (self.css("position") == "static") {
                        /** @type {boolean} */
                        q = true;
                        self.addClass("position-relative");
                    }
                    self.append('<div class="widget-box-overlay"><i class="icon-spinner icon-spin icon-2x white"></i></div>');
                    self.one("reloaded.ace.widget", function() {
                        self.find(".widget-box-overlay").remove();
                        if (q) {
                            self.removeClass("position-relative");
                        }
                    });
                } else {
                    if (graph == "settings") {
                        e = $.Event("settings.ace.widget");
                        self.trigger(e);
                    }
                }
            }
        }
    });
};
/**
 * @param {?} $
 * @return {undefined}
 */
ace.widget_reload_handler = function($) {
    $(document).on("reload.ace.widget", ".widget-box", function(dataAndEvents) {
        var collection = $(this);
        setTimeout(function() {
            collection.trigger("reloaded.ace.widget");
        }, parseInt(Math.random() * 1E3 + 1E3));
    });
};
/**
 * @param {?} $
 * @return {undefined}
 */
ace.enable_search_ahead = function($) {
    /** @type {Array} */
    ace.variable_US_STATES = ["Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado", "Connecticut", "Delaware", "Florida", "Georgia", "Hawaii", "Idaho", "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana", "Maine", "Maryland", "Massachusetts", "Michigan", "Minnesota", "Mississippi", "Missouri", "Montana", "Nebraska", "Nevada", "New Hampshire", "New Jersey", "New Mexico", "New York", "North Dakota", "North Carolina", "Ohio", "Oklahoma", "Oregon", "Pennsylvania", "Rhode Island",
        "South Carolina", "South Dakota", "Tennessee", "Texas", "Utah", "Vermont", "Virginia", "Washington", "West Virginia", "Wisconsin", "Wyoming"];
    try {
        $("#nav-search-input").typeahead({
            source : ace.variable_US_STATES,
            /**
             * @param {?} item
             * @return {?}
             */
            updater : function(item) {
                $("#nav-search-input").focus();
                return item;
            }
        });
    } catch (b) {
    }
};
/**
 * @param {?} $
 * @return {undefined}
 */
ace.switch_direction = function($) {
    /**
     * @param {string} name
     * @param {string} className
     * @return {undefined}
     */
    function addClass(name, className) {
        self.find("." + name).removeClass(name).addClass("tmp-rtl-" + name).end().find("." + className).removeClass(className).addClass(name).end().find(".tmp-rtl-" + name).removeClass("tmp-rtl-" + name).addClass(className);
    }
    /**
     * @param {?} position
     * @param {?} name
     * @param {?} attrs
     * @return {undefined}
     */
    function start(position, name, attrs) {
        attrs.each(function() {
            var $video = $(this);
            var value = $video.css(name);
            $video.css(name, $video.css(position));
            $video.css(position, value);
        });
    }
    var self = $(document.body);
    self.toggleClass("rtl").find(".dropdown-menu:not(.datepicker-dropdown,.colorpicker)").toggleClass("pull-right").end().find(".pull-right:not(.dropdown-menu,blockquote,.profile-skills .pull-right)").removeClass("pull-right").addClass("tmp-rtl-pull-right").end().find(".pull-left:not(.dropdown-submenu,.profile-skills .pull-left)").removeClass("pull-left").addClass("pull-right").end().find(".tmp-rtl-pull-right").removeClass("tmp-rtl-pull-right").addClass("pull-left").end().find(".chosen-container").toggleClass("chosen-rtl").end();
    addClass("align-left", "align-right");
    addClass("no-padding-left", "no-padding-right");
    addClass("arrowed", "arrowed-right");
    addClass("arrowed-in", "arrowed-in-right");
    addClass("messagebar-item-left", "messagebar-item-right");
    var me = $("#piechart-placeholder");
    if (me.size() > 0) {
        /** @type {string} */
        var capture = $(document.body).hasClass("rtl") ? "nw" : "ne";
        me.data("draw").call(me.get(0), me, me.data("chart"), capture);
    }
};
