<?php

namespace {
function getparentcwd()
{
	return dirname(getcwd());
}
class Installer
{
	private $config;
	private static $instance;
	private $log = array();
	private $completedActionNames = array();
	private $lastFormName;
	private $replacementVars = array();
	private $currentActionData = array();
	private $currentStep = 0;
	private $siteUrl;
	private $adminSiteUrl;
	private $pathToApplicationRoot;
	private $id;
	private $dataForRemoteLogging = array();

	/**
	 * @static
	 * @return Installer;
	 */
	public static function getInstance()
	{
		if (empty(self::$instance))
		{
			self::$instance = new Installer();
		}
		return self::$instance;
	}

	public function init($config)
	{
		spl_autoload_register(array($this, 'autoload'));

		if ($this->getRequestValue('action') == 'file')
		{
			$this->sendFile();
			exit;
		}
		session_start();
		//todo:refactor here
		if (isset($_REQUEST['downloadLicense']) && ! empty($_SESSION['license']))
		{
			header("Content-type:");
			header("Content-Disposition: attachment; filename=license");
			echo  $_SESSION['license'];
			exit;
		}

		$this->config = $config;
		$this->initSiteUrls();


		if (!isset($_REQUEST['restore']))
		{
			session_unset();
			$this->id = uniqid();
			$this->setData('id', $this->id);
		}
		else
		{
			$this->id = $this->getData('id');
		}

		$this->pathToApplicationRoot = isset($config['pathToApplicationRoot']) ? $config['pathToApplicationRoot'] : "./";
		$this->completedActionNames = $this->getData('completedActionNames');
		$this->log = $this->getData('setupLog');


		$this->setReplacementVar('product', $config['product']);
		$this->setReplacementVar('version', $config['version']);
		$this->setReplacementVar('siteUrl', 'http://' . $_SERVER['HTTP_HOST'] . ':' . $_SERVER['SERVER_PORT'] . pathinfo(parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH), PATHINFO_DIRNAME));
	}

	public function __destruct()
	{
		$this->setData('completedActionNames', $this->completedActionNames);
		$this->setData('setupLog', $this->log);

		$data = $this->getDataForRemoteLogging();
		$data['action_statuses'] = $this->completedActionNames;
		$data['log_data'] = $this->log;

		$this->remoteLog($data);
	}

	public function autoload($classname)
	{
		$pathToFile = str_replace("\\", "/", $classname) . ".php";
		include_once($pathToFile);
	}

	public function run()
	{
		try
		{
			ob_start();
			foreach ($this->config['build'] as $action => $actionData)
			{
				++$this->currentStep;
				if (!array_key_exists($action, $this->completedActionNames))
				{
					list($taskName) = array_keys($actionData);
					$this->remoteLogAction($action);
					$this->remoteLogStatus('ACTION_STARTED');
					try
					{
						$this->currentActionData = $actionData;
						$this->doTask($taskName, $actionData[$taskName]);
						$this->completedActionNames[$action] = 'completed';
					}
					catch (SkipActionException $e)
					{
						$this->writeLog($actionData['caption'] ." skipped.", 'warning');
						$this->completedActionNames[$action] = 'skipped';
						$this->unsetDataForLastForm();
					}
					$this->clearRequest();
				}
			}
			$this->showMainTemplate(ob_get_clean());
		}
		catch (WaitForUserInputException $e)
		{
			$this->remoteLogStatus('USER_INPUT');
			$this->showMainTemplate(ob_get_clean());
		}
		catch (StepFailedException $e)
		{
			$this->remoteLogStatus('STEP_FAILED');
			$this->writeLog($e->getMessage(), 'warning');
			$this->writeMessage($e->getMessage(), 'error');
			$this->unsetDataForLastForm();
			header("Location: {$_SERVER['PHP_SELF']}?restore");
		}
		catch (InstallationFailedException $e)
		{
			$this->remoteLogStatus('INSTALLATION_FAILED');
			$this->writeLog($e->getMessage(), 'error');
			$m = ob_get_contents();
			ob_end_clean();

			if ($e->displayBuffer) {
				$content = $m;
			} else {
				$content = "<div class='alert alert-danger' role='alert'>" . $e->getMessage() . "</div>";
			}

			$t = new \TemplateProcessor\Template();
			$this->showMainTemplate($content . $t->fetch('files/retry_control.tpl'));
		}
	}

	private function remoteLogAction($action)
	{
		$this->setDataForRemoteLog('current_action', $action);
	}

	private function remoteLogStatus($status)
	{
		$this->setDataForRemoteLog('current_status', $status);
	}

	private function remoteLog($params)
	{
		if (empty($this->config['remoteLogHandlerUrl']))
		{
			return;
		}
		$url = $this->config['remoteLogHandlerUrl'];

		$params['id'] = $this->id;
		$params['site_url'] = $this->siteUrl;
		$params['product_name'] = $this->config['product'];
		$params['product_version'] = $this->config['version'];
		$params['php_version'] = PHP_VERSION;
		$params['time'] = time();
		// change log version if the log structure has been changed
		$params['log_version'] = '1';

		// post without waiting for response
		$post_string = http_build_query($params);
		$parts = parse_url($url);

		@$fp = fsockopen($parts['host'],
			isset($parts['port']) ? $parts['port'] : 80,
			$errNo, $errStr, 30);
		if (false === $fp) return;

		$out = "POST " . $parts['path'] . " HTTP/1.1\n";
		$out .= "Host: " . $parts['host'] . "\n";
		$out .= "Content-Type: application/x-www-form-urlencoded\n";
		$out .= "Content-Length: " . strlen($post_string) . "\n";
		$out .= "Connection: Close\n\n";
		if (!empty($post_string))
		{
			$out .= $post_string;
		}
		fwrite($fp, $out);
		fclose($fp);
	}

	private function showMainTemplate($content)
	{
		$pageTemplate = new \TemplateProcessor\Template();
		$pageTemplate->MAIN_CONTENT = $content;
		$pageTemplate->LOG = $this->getLog();
		$pageTemplate->ACTIONS = $this->getActionsList();
		$pageTemplate->CURRENT_STEP = $this->currentStep;
		$pageTemplate->All_STEPS = count($this->config['build']);
		$pageTemplate->product_name = $this->config['product'];
		$pageTemplate->product_version = $this->config['version'];
		$template = isset($this->config['templateFileName']) ? $this->config['templateFileName'] : "files/default_index.tpl";
		$pageTemplate->display($template);
	}

	private function getActionsList()
	{
		$result = array();
		$currentFound = false;
		foreach ($this->config['build'] as $action => $actionData)
		{
			if (!array_key_exists($action, $this->completedActionNames))
			{
				if (!$currentFound)
				{
					$result[$actionData['caption']] = 'current';
					$currentFound = true;
				}
				else
				{
					$result[$actionData['caption']] = 'incomplete';
				}
			}
			else
			{
				$result[$actionData['caption']] = $this->completedActionNames[$action];
			}
		}
		return $result;
	}

	private function sendFile()
	{
		$filename = $_REQUEST['file'];
		$file = new \TemplateProcessor\File($filename);
		header("Content-type:" . $file->getContentType());
		$file->flushContent();
	}

	public function doTask($taskName, $taskData)
	{
		$taskClassName = "\\Tasks\\$taskName";
		$task = new $taskClassName($taskData);
		$task->setConfig($this->config);
		$task();

		if (isset($taskData['log']))
		{
			$this->writeLog($taskData['log']['message'], $taskData['log']['type']);
		}

	}

	public function getFormsData()
	{
		return $this->config['forms'];
	}

	public function getRequestValue($name)
	{
		return isset($_REQUEST[$name]) ? $_REQUEST[$name] : null;
	}

	public function writeLog($message, $type = 'info')
	{
		$this->log[] = array('content' => $message, 'type' => $type, 'datetime' => date("Y-m-d H:i:s"));
	}
	public function writeMessage($message, $type = 'info', $messageId = null)
	{
		$messages = $this->getData('messages');
		if ($messageId !== null)
		{
			$messages[$messageId] = array('message' => $message, 'type' => $type);
		}
		else
		{
			$messages[] = array('message' => $message, 'type' => $type);
		}
		$this->setData('messages', $messages);
	}

	private function getLog()
	{
		$result = "";
		foreach ($this->log as $log)
		{
			$logType = strtoupper($log['type']);

			switch ($log['type']) {

				case 'info':
				case 'warning':
				case 'success':
					$cssClass = 'text-' . $log['type'];
					break;
				case 'error':
					$cssClass = 'text-danger';
					break;
			}

			$result .= "<div><span>[{$log['datetime']}]</span> <span class='{$cssClass}'><span>{$logType}:</span> {$log['content']}</span></div>";
		}
		return $result;
	}
	public function getMessages()
	{
		$messages = $this->getData('messages');
		$this->unsetData('messages');
		return $messages;
	}

	public function getDataForForm($formName)
	{
		if (!empty($_SESSION['Data'][$formName]))
		{
			return $_SESSION['Data'][$formName];
		}
		$this->doTask("RequestUserInput", array('formName' => $formName, 'skipable' => isset($this->currentActionData['skipable'])));
		$this->lastFormName = $formName;
		return $_SESSION['Data'][$formName];
	}
	public function setDataForForm($formName, $data)
	{
		$_SESSION['Data'][$formName] = $data;
	}
	public function unsetDataForLastForm()
	{
		if (isset($this->lastFormName))
			unset($_SESSION['Data'][$this->lastFormName]);
	}

	public function getData($id, $default = array())
	{
		return isset($_SESSION[$id]) ? $_SESSION[$id] : $default;
	}
	public function setData($id, $data)
	{
		$_SESSION[$id] = $data;
	}
	public function unsetData($id)
	{
		unset($_SESSION[$id]);
	}

	private function clearRequest()
	{
		$_REQUEST = array();
	}

	public function replaceMessageVarsToValues($message)
	{
		foreach ($this->replacementVars as $name => $value)
		{
			$message = str_replace("\${{$name}}", $value, $message);
		}
		return $message;
	}

	public function setReplacementVar($name, $value)
	{
		$this->replacementVars[$name] = $value;
	}

	public function getReplacementVar($name)
	{
		return $this->replacementVars[$name];
	}

	public function getBaseUrl()
	{
		return $this->siteUrl;
	}

	public function getConfig($key)
	{
		return $this->config[$key];
	}

	public function getFtpClient($host, $port, $user, $password, $dir = null)
	{
		$ftpClient = new FtpClient();
		$ftpClient->connect($host, $port);
		$ftpClient->login($user, $password);
		if (!is_null($dir)) $ftpClient->chdir($dir);
		return $ftpClient;
	}

	public function getCurlSession($id)
	{
		return new CurlSession($id);
	}

	public function getAdminPanelUrl()
	{
		return $this->adminSiteUrl;
	}

	private function initSiteUrls()
	{
		$siteUrlDefineMethod = isset($this->config['siteUrlDefineMethod']) ? $this->config['siteUrlDefineMethod'] : "useSelfUrl";
		if ($siteUrlDefineMethod == "useSelfUrl")
		{
			$pathInfo = pathinfo($_SERVER['SCRIPT_NAME']);
			$pathInfo['dirname'] = str_replace ("\\", "/", $pathInfo['dirname']);
			if ($pathInfo['dirname'] == "/") $pathInfo['dirname'] = "";
			$this->siteUrl = 'http://' . $_SERVER['HTTP_HOST'] . $pathInfo['dirname'];
			$this->adminSiteUrl = $this->siteUrl . "/admin/";
		}
		elseif ($siteUrlDefineMethod == "readFromConfigFile")
		{
			$this->siteUrl = $this->getSiteUrlFromConfigFile($this->pathToApplicationRoot . "/apps/FrontEnd/config/local.ini");
			$this->adminSiteUrl = $this->getSiteUrlFromConfigFile($this->pathToApplicationRoot . "/apps/AdminPanel/config/local.ini");
		}
		else
		{
			throw new InstallationFailedException("Undefined method '{$siteUrlDefineMethod}' for defining Site Urls");
		}
	}

	private function getSiteUrlFromConfigFile($pathToFile)
	{
		$parsed = parse_ini_file($pathToFile);
		return $parsed['SiteUrl'];
	}

	/**
	 * @return mixed
	 */
	public function getPathToApplicationRoot()
	{
		return $this->pathToApplicationRoot;
	}

	private function getDataForRemoteLogging()
	{
		return $this->dataForRemoteLogging;
	}

	private function setDataForRemoteLog($id, $value)
	{
		$this->dataForRemoteLogging[$id] = $value;
	}
}

class StepFailedException extends \Exception
{
}

class WaitForUserInputException extends \Exception
{
}

class InstallationFailedException extends \Exception
{
	public $displayBuffer;

	public function __construct($message = "", $displayBuffer = false)
	{
		$this->displayBuffer = $displayBuffer;
		parent::__construct($message);
	}
}

class SkipActionException extends \Exception
{
}

class UndefinedActionRequestedException extends \Exception
{
	private $actionId;

	public function __construct($actionId)
	{
		$this->actionId = $actionId;
		$this->message = "Undefined action $actionId";
	}
}

class UndefinedRequirementTypeRequestedException extends \Exception
{
	private $requirementType;

	public function __construct($requirementType)
	{
		$this->requirementType = $requirementType;
		$this->message = "Undefined requirement type $requirementType";
	}
}

class FtpClient
{
	private $ftpResource;

	public function connect($ftpHost, $ftpPort)
	{
		$this->ftpResource = @ftp_connect($ftpHost, $ftpPort);
	}

	public function login($ftpUser, $ftpPassword)
	{
		return @ftp_login($this->ftpResource, $ftpUser, $ftpPassword);
	}

	public function chdir($ftpDirectory)
	{
		return @ftp_chdir($this->ftpResource, $ftpDirectory);
	}

	public function delete($pathToFile)
	{
		return @ftp_delete($this->ftpResource, $pathToFile);
	}

	public function rmdir($path)
	{
		return @ftp_rmdir($this->ftpResource, $path);
	}

	public function rename($from, $to)
	{
		return @ftp_rename($this->ftpResource, $from, $to);
	}
}

class CurlSession
{
	private $curl;

	public function __construct($id)
	{
		$this->curl = curl_init();
		curl_setopt($this->curl, CURLOPT_HEADER, 0);
		curl_setopt($this->curl, CURLOPT_SSL_VERIFYPEER, 0);
		curl_setopt($this->curl, CURLOPT_RETURNTRANSFER, 1);
		curl_setopt($this->curl, CURLOPT_TIMEOUT, 60);
		curl_setopt($this->curl, CURLOPT_FOLLOWLOCATION, 1);
		curl_setopt($this->curl, CURLOPT_COOKIEJAR, tempnam("", $id));
		if (isset($_SERVER['PHP_AUTH_USER'], $_SERVER['PHP_AUTH_PW']))
		{
			curl_setopt($this->curl, CURLOPT_HTTPAUTH, CURLAUTH_ANY);
			curl_setopt($this->curl, CURLOPT_USERPWD, "{$_SERVER['PHP_AUTH_USER']}:{$_SERVER['PHP_AUTH_PW']}");
		}
	}

	public function request($url, $requestVars = array(), $method = 'GET')
	{
		$queryString = http_build_query($requestVars, '', '&');
		switch ($method)
		{
			case 'GET' :
				curl_setopt($this->curl, CURLOPT_HTTPGET, true);
				$url .= (strpos($url, '?')) ? '&' : '?';
				$url .= $queryString;
				break;
			case 'POST' :
				curl_setopt($this->curl, CURLOPT_POST, true);
				curl_setopt($this->curl, CURLOPT_POSTFIELDS, $queryString);
				break;
			default :
				throw new \Exception('Unknown method: ' . $method);
		}
		curl_setopt($this->curl, CURLOPT_URL, $url);
		curl_exec($this->curl);

		return curl_getinfo($this->curl, CURLINFO_HTTP_CODE);
	}

	public function __destruct()
	{
		curl_close($this->curl);
	}
}
}

namespace Requirements {

class PhpExtension extends Requirement
{
	public function isValid()
	{
		\Installer::getInstance()->writeLog("Checking PHP \"{$this->data['name']}\" extension...");
		return extension_loaded($this->data['name']);
	}

	public function getCaption()
	{
		return $this->data['name'];
	}
}
}

namespace Requirements {

class PhpIniSetting extends Requirement
{
	public function isValid()
	{
		\Installer::getInstance()->writeLog("Checking php.ini \"{$this->data['name']}\" setting...");
		return ini_get($this->data['name']) == $this->data['value'];
	}

	public function getCaption()
	{
		return $this->data['name'];
	}
}
}

namespace Requirements {

class PhpTimeZone extends Requirement
{
	public function isValid()
	{
		\Installer::getInstance()->writeLog("Checking php.ini \"date.timezone\" setting...");
		$timezone = ini_get('date.timezone');
		return !empty($timezone);
	}

	public function getCaption()
	{
		return 'Time Zone';
	}
}
}

namespace Requirements {

class PhpVersion extends Requirement
{
	public function __construct($data)
	{
		\Installer::getInstance()->setReplacementVar('php_version', phpversion());
		parent::__construct($data);
	}

	public function isValid()
	{
		\Installer::getInstance()->writeLog("Checking PHP Version...");
		return version_compare($this->data['min'], phpversion(), "<=") &&
				version_compare($this->data['max'], phpversion(), ">");
	}

	public function getCaption()
	{
		return 'PHP Version';
	}
}
}

namespace Requirements {

class RebuildInterfaceCacheCheck extends Requirement
{
	public function isValid()
	{
		\Installer::getInstance()->writeLog("Checking Possibility To Rebuild Interface Cache...");
		$url = \Installer::getInstance()->getBaseUrl() . '/?SYSCOMMAND=REBUILD_INTERFACE_CACHE_CHECK';
		$serverResponse = $this->curlRequest($url);
		if ($serverResponse['status'] < 200 || $serverResponse['status'] >= 300)
		{
			\Installer::getInstance()->writeLog($serverResponse['response'], "error");
			return false;
		}
		return true;
	}

	private function curlRequest($url)
	{
		$curl = curl_init($url);
		curl_setopt($curl, CURLOPT_HEADER, 0);
		curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);
		curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
		curl_setopt($curl, CURLOPT_TIMEOUT, 60);
		curl_setopt($curl, CURLOPT_FOLLOWLOCATION, 1);
		if (isset($_SERVER['PHP_AUTH_USER'], $_SERVER['PHP_AUTH_PW']))
		{
			curl_setopt($curl, CURLOPT_HTTPAUTH, CURLAUTH_ANY);
			curl_setopt($curl, CURLOPT_USERPWD, "{$_SERVER['PHP_AUTH_USER']}:{$_SERVER['PHP_AUTH_PW']}");
		}
		$response = curl_exec($curl);
		$status = curl_getinfo($curl, CURLINFO_HTTP_CODE);
		curl_close($curl);
		return array('status' => $status, 'response' => $response);
	}

	public function getCaption()
	{
		return 'Cache Build';
	}
}
}


namespace Requirements {

abstract class Requirement
{
	protected $data;

	public function __construct($data)
	{
		$this->data = $data;
	}
	public function getFailureMessage()
	{
		return \Installer::getInstance()->replaceMessageVarsToValues($this->data['message']);
	}
	public function isMandatory()
	{
		return $this->data['mandatory'];
	}

	abstract public function isValid();
	abstract public function getCaption();
}
}

namespace Tasks
{
	abstract class AbstractTask
	{
		protected $data;
		protected $config;

		public function __construct($data)
		{
			$this->data = $data;
		}

		public abstract function __invoke();

		public function setConfig($config)
		{
			$this->config = $config;
		}

		protected function getFiles()
		{
			$files = array();
			if (isset($this->data['fileset']))
			{
				if (isset($this->data['fileset']['includesfile']))
				{
					$files = array_merge($files, array_map('trim', file($this->data['fileset']['includesfile'])));
				}
				else
				{
					foreach ($this->data['fileset'] as $filesetRecord)
					{
						if (isset($filesetRecord['pattern']))
						{
							$currentDir = getcwd();
							if (isset($this->data['fileset']['basedir']))
							{
								chdir($this->data['fileset']['basedir']);
							}
							$it = new \GlobIterator($filesetRecord['pattern']);
							foreach ($it as $file)
							{
								$files[] = (string)$file;
							}
							chdir($currentDir);

						}
					}
				}
			}
			if (isset($this->data['file']))
			{
				$files[] = $this->data['file'];
			}
			return $files;
		}
	}
}

namespace Tasks {

class ApplyPermissionsViaFTP extends AbstractTask
{
	public function __invoke()
	{
		if (isset($this->data['message']))
		{
			$message = \Installer::getInstance()->replaceMessageVarsToValues($this->data['message']);
			\Installer::getInstance()->writeMessage($message, 'info', 'description');
		}
		$data = \Installer::getInstance()->getDataForForm($this->data['dataSet']);
		$dirsData = isset($this->data['dirset']) ? $this->data['dirset'] : array();
		$filesData = isset($this->data['fileset']) ? $this->data['fileset'] : array();
		$mode = $this->data['mode'];

		$ftpResource = @ftp_connect($data['ftpHost'], $data['ftpPort']);
		@ftp_login($ftpResource, $data['ftpUser'], $data['ftpPassword']);

		$ftpDirectory = $data['ftpDirectory'];
		if (!empty($ftpDirectory) && $ftpDirectory{strlen($ftpDirectory) - 1} != '/') $ftpDirectory .= '/';
		if ($ftpDirectory{0} != '/') $ftpDirectory = './' . $ftpDirectory;

		$failedDirs = array();
		$failedFiles = array();

		if (!empty($dirsData))
		{
			\Installer::getInstance()->writeLog("Changing directory permissions via FTP...");
			foreach ($dirsData as $dirData)
			{
                if (filter_var($dirData['optional'], FILTER_VALIDATE_BOOLEAN) && !file_exists($dirData['path']))
                {
                    \Installer::getInstance()->writeLog("Optional directory \"{$dirData['path']}\" does not exist. Skipped", "warning");
                }
                elseif (!file_exists($dirData['path']))
                {
					\Installer::getInstance()->writeLog("Directory \"{$dirData['path']}\" does not exist", "error");
					$failedDirs[] = $dirData['path'];
                }
				elseif (@ftp_site($ftpResource, "CHMOD $mode " . $ftpDirectory . "{$dirData['path']}") === false)
				{
					\Installer::getInstance()->writeLog("Cannot change mode of directory \"{$dirData['path']}\"", "error");
					$failedDirs[] = $dirData['path'];
				}
			}
			if (empty($failedDirs))
			{
				\Installer::getInstance()->writeLog("Changed directory permissions successfully...", "success");
			}
			else
			{
				\Installer::getInstance()->writeMessage("The specified FTP user does not have enough rights to change permissions to {$mode} for the following directories: \n<ul><li>" . implode("</li><li>", $failedDirs) . "</li><ul>\n", "error");
			}
		}

		if (!empty($filesData))
		{
			\Installer::getInstance()->writeLog("Changing file permissions via FTP...");
			foreach ($filesData as $fileData)
			{
                if (filter_var($fileData['optional'], FILTER_VALIDATE_BOOLEAN) && !file_exists($fileData['path']))
                {
                    \Installer::getInstance()->writeLog("Optional file \"{$fileData['path']}\" does not exist. Skipped", "warning");
                }
                elseif (!file_exists($fileData['path']))
                {
					\Installer::getInstance()->writeLog("File \"{$fileData['path']}\" does not exist", "error");
					$failedFiles[] = $fileData['path'];
                }
				elseif (@ftp_site($ftpResource, "CHMOD $mode " . $ftpDirectory . "{$fileData['path']}") === false)
				{
					\Installer::getInstance()->writeLog("Cannot change mode of file \"{$fileData['path']}\"", "error");
					$failedFiles[] = $fileData['path'];
				}
			}
			if (empty($failedFiles))
			{
				\Installer::getInstance()->writeLog("Changed file permissions successfully...", "success");
			}
			else
			{
				\Installer::getInstance()->writeMessage("The specified FTP user does not have enough rights to change permissions to {$mode} for the following files: \n<ul><li>" . implode("</li><li>", $failedFiles) . "</li><ul>\n", "error");
			}
		}

		ftp_close($ftpResource);

		if (!empty($failedDirs) || !empty($failedFiles))
		{
			throw new \StepFailedException("Please specify an FTP user which has enough rights to change permissions or change them manually. Alternatively, you can skip this step and set the correct permissions later.");
		}
	}
}
}

namespace Tasks {

class CheckExtraModuleVersionCompatibilities extends AbstractTask
{
    public function __construct($data)
    {
        parent::__construct($data);
        $this->data = $data;
        $upgradePatchDirBaseName = basename(dirname(__FILE__));
    }

    public function __invoke()
    {
		if (isset($_REQUEST['actionSkip']))
		{
			throw new \SkipActionException();
		}
        
        $patchInfo = $this->readPatchPackageInfo();
        $extraModuleDataList = $this->getProductVersionExtraModuleDataList($patchInfo['product'], $patchInfo['version']);
        
        $incompatibleExtraModules = array();
        
        foreach($extraModuleDataList as $extraModuleData)
        {
            if ($this->moduleExists($extraModuleData['name']))
            {
                $installedExtraModuleInfo = $this->readModulePackageInfo($extraModuleData['name']);
                if ($installedExtraModuleInfo['version'] < $extraModuleData['version'])
                {
                    $incompatibleExtraModules[] = array(
                        'name' => $extraModuleData['name'],
                        'caption' => $extraModuleData['caption'],
                        'currentVersion' => $installedExtraModuleInfo['version'],
                        'requiredVersion' => $extraModuleData['version'],
                    );
                }
            }
        }
        
        if (empty($incompatibleExtraModules))
        {
            \Installer::getInstance()->writeLog('Existing extra module versions are compatible with patch version.', 'success');
        }
        else
        {
            \Installer::getInstance()->writeLog("Existing extra module versions are incompatible with patch version.", 'error');
            
            $log = array();
            foreach($incompatibleExtraModules as $incompatibleExtraModule)
            {
                $log[] = $incompatibleExtraModule['name'] . '-' . $incompatibleExtraModule['currentVersion'] . '. Required version is '. $incompatibleExtraModule['requiredVersion'];
            }
            
			$template = new \TemplateProcessor\Template();
			$template->caption = "Checking Extra Module Compabilities";
			$template->skipable = isset($this->data['skipable']) ? $this->data['skipable'] : false;
			$template->message = "The following extra module versions are incompatible with patch version and must be upgraded.  \n<ul><li>" . implode("</li><li>", $log) . "</li><ul>\n";

			$template->display('files/retry_skip_confirmation.tpl');
            
            throw new \WaitForUserInputException();
        }
    }
    
    private function moduleExists($moduleName)
    {
        $ftpDataSet = \Installer::getInstance()->getDataForForm($this->data['FtpDataSet']);
        $dir = $ftpDataSet['ftpDirectory'] . '/modules/' . $moduleName;
        
        return @is_dir($dir);
    }
    
    private function readModulePackageInfo($moduleName)
    {
        $ftpDataSet = \Installer::getInstance()->getDataForForm($this->data['FtpDataSet']);
        $dir = $ftpDataSet['ftpDirectory'] . '/modules/' . $moduleName;
        $fileContent = file_get_contents($dir . '/packageinfo.txt');
        preg_match('/\Module: (?P<module>\w+) v\.(?P<version>[\w\.\-]+), \(c\) WorksForWeb 2005 - 20.*/', $fileContent, $matches);
        if (empty($matches))
        {
            throw new \InstallationFailedException("Could not locate file 'packageinfo.txt' of module '{$moduleName}' in directory '{$dir}'");
        }
        
        return array(
            'module' => $matches['module'],
            'version' => $matches['version'],
        );
    }

    private function readPatchPackageInfo()
    {
        $dir = dirname(__FILE__);
        $fileContent = file_get_contents($dir . '/packageinfo.txt');
        preg_match('/(?P<product>\w+) v\.(?P<version>[\w\.\-]+), \(c\) WorksForWeb 2005 - 20.*/', $fileContent, $matches);
        if (empty($matches))
        {
            throw new \InstallationFailedException("Could not locate file 'packageinfo.txt' of upgrade patch in directory '{$dir}'");
        }
        
        return array(
            'product' => $matches['product'],
            'version' => $matches['version'],
        );
    }

    private function getProductVersionExtraModuleDataList($product, $version)
    {
        return array_merge(
            $this->getExtraModuleDataByUrl("http://www.worksforweb.com/modules_data/{$version}/common.xml"),
            $this->getExtraModuleDataByUrl("http://www.worksforweb.com/modules_data/{$version}/{$product}.xml")
        );
    }

    private function getExtraModuleDataByUrl($url) 
    {
        $xml = @simplexml_load_file($url);
        if (empty($xml->module))
        {
            throw new \InstallationFailedException("Could not fetch modules data");
        }
        
        $extraModules = array();

        foreach ($xml->module as $module)
        {
            if (strtolower($module['extra']) == 'true')
            {
                $extraModule['name'] = (string) $module['name'];
                $extraModule['caption'] = (string) $module['caption'];
                $extraModule['version'] = (string) $module->version['value'];
                $extraModules[] = $extraModule;
            }
        }

        return $extraModules;
    }
    
    }
}

namespace Tasks
{
	class CheckFileNotExists extends AbstractTask
	{
		public function __invoke()
		{
			$files = array_filter($this->getFiles(), array($this, 'fileExists'));
			if (!empty($files))
			{
				$this->displayConfirmationPage("Checking Deleted Files", "Delete the files listed below and click retry.", $files);
				throw new \WaitForUserInputException();
			}
		}

		private function displayConfirmationPage($caption, $message, $failedFiles)
		{
			$template = new \TemplateProcessor\Template();
			$template->caption = $caption;
			$template->skipable = isset($this->data['skipable']) ? $this->data['skipable'] : false;
			$template->message = $message;
			$template->failedFiles = $failedFiles;

			$template->display('files/default_confirmation.tpl');
		}

		private function fileExists($file)
		{
			return !empty($file) && file_exists(\Installer::getInstance()->getPathToApplicationRoot(). $file);
		}
	}
}


namespace Tasks
{
	class CheckFilePermission extends AbstractTask
	{
		public function __invoke()
		{
			$expectedMode = isset($this->data['expectedMode']) ? $this->data['expectedMode'] : true;
			$messagesData = isset($this->data['messages']) ? $this->data['messages'] : array();
			$log = isset($messagesData['log']) ? $messagesData['log'] : false;
			$failureLog = isset($messagesData['failureLog']) ? $messagesData['failureLog'] : false;
			$failureLogType = $messagesData['failureLogType'];
			$failureMessage = $messagesData['failureMessage'];
			$dirSet = isset($this->data['dirset']) ? $this->data['dirset'] : array();
			$fileSet = isset($this->data['fileset']) ? $this->data['fileset'] : array();
						
			if ($log)
				\Installer::getInstance()->writeLog($log);

			$failedDirs = $this->getWriteFailedItems($dirSet, $expectedMode);
			$failedFiles = $this->getWriteFailedItems($fileSet, $expectedMode);

			if (!empty($failedDirs) || !empty($failedFiles))
			{
				if ($failureLog)
					\Installer::getInstance()->writeLog($failureLog, $failureLogType);
				
				$message = str_replace('${expectedPermissionMode}', $expectedMode, $failureMessage);
				
				if (isset($_REQUEST['actionNext']))
				{
					throw new \SkipActionException();
				}
				else
				{
					$this->displayConfirmationPage($log, $message, $failedDirs, $failedFiles);
					throw new \WaitForUserInputException();
				}
			}
		}

		private function getWriteFailedItems($items, $expectedMode)
		{
			$failedItems = array();
			foreach ($items as $item)
			{
				clearstatcache();
				// do not check if optional is set to 'true' and file does not exist
				if (filter_var($item['optional'], FILTER_VALIDATE_BOOLEAN) && !file_exists($item['path']))
				{
					continue;
				}

                if (substr(decoct(fileperms($item['path'])), -3) != $expectedMode)
                {
                    $failedItems[] = $item['path'];
                }
			}
			return $failedItems;
		}
		
		private function displayConfirmationPage($caption, $message, $failedDirs, $failedFiles)
		{
			$template = new \TemplateProcessor\Template();
			$template->caption = $caption;
			$template->skipable = isset($this->data['skipable']) ? $this->data['skipable'] : false;
			$template->message = $message;
			$template->failedDirs = $failedDirs;
			$template->failedFiles = $failedFiles;
			
			$template->display('files/default_confirmation.tpl');
		}
	}
}

namespace Tasks
{
	class CheckFileWritable extends AbstractTask
	{
		public function __invoke()
		{
			$messagesData = isset($this->data['messages']) ? $this->data['messages'] : array();
			$log = isset($messagesData['log']) ? $messagesData['log'] : false;
			$failureLog = isset($messagesData['failureLog']) ? $messagesData['failureLog'] : false;
			$failureLogType = $messagesData['failureLogType'];
			$failureMessage = $messagesData['failureMessage'];
			$dirSet = isset($this->data['dirset']) ? $this->data['dirset'] : array();
			$fileSet = isset($this->data['fileset']) ? $this->data['fileset'] : array();
						
			if ($log)
				\Installer::getInstance()->writeLog($log);

			$failedDirs = $this->getWriteFailedItems($dirSet);
			$failedFiles = $this->getWriteFailedItems($fileSet);

			if (!empty($failedDirs) || !empty($failedFiles))
			{
				if ($failureLog)
					\Installer::getInstance()->writeLog($failureLog, $failureLogType);
				
				if (isset($_REQUEST['actionNext']))
				{
					throw new \SkipActionException();
				}
				else
				{
					$this->displayConfirmationPage($log, $failureMessage, $failedDirs, $failedFiles);
					throw new \WaitForUserInputException();
				}
			}
		}

		private function getWriteFailedItems($items)
		{

			$failedItems = array();
			foreach ($items as $item)
			{
				clearstatcache();
				// do not check if optional is set to 'true' and file does not exist
				if (filter_var($item['optional'], FILTER_VALIDATE_BOOLEAN) && !file_exists($item['path']))
				{
					continue;
				}

				if (!is_writable($item['path']))
				{
					$failedItems[] = $item['path'];
				}
			}
			return $failedItems;
		}

		private function displayConfirmationPage($caption, $message, $failedDirs, $failedFiles)
		{
			$template = new \TemplateProcessor\Template();
			$template->caption = $caption;
			$template->skipable = isset($this->data['skipable']) ? $this->data['skipable'] : false;
			$template->message = $message;
			$template->failedDirs = $failedDirs;
			$template->failedFiles = $failedFiles;
			
			$template->display('files/default_confirmation.tpl');
		}
	}
}


namespace Tasks {
	class CheckLicense extends AbstractTask
	{

		public function __invoke()
		{
			if (file_exists('license') || $_SERVER['HTTP_HOST'] == 'localhost')
				throw new \SkipActionException();

			if (isset($_REQUEST['actionNext']) && ! file_exists('license'))
			{
			   throw new \StepFailedException("No License");
			}

			if (isset($_REQUEST['actionNext']) && file_exists('license'))
			{
				\Installer::getInstance()->writeLog("License successfully uploaded", "success");
				return;
			}

			$template = new \TemplateProcessor\Template();
			$template->message = $this->data['message'];
			$template->display('files/show_license.tpl');

			$waitForConfirmation = isset($this->data['waitForConfirmation']) ? $this->data['waitForConfirmation'] : false;
			if ($waitForConfirmation)
			{
				$template->actionNext = true;
				$template->display('files/default_button_set.tpl');

				throw new \WaitForUserInputException();
			}
		}
	}
}

namespace Tasks {

class CheckRequirements extends AbstractTask
{
	public function __invoke()
	{
		if (isset($_REQUEST['actionNext']))
		{
			return;
		}

		$requirements = $this->data['requirements'];

		\Installer::getInstance()->writeLog("Checking minimal server requirements...");

		$hasError = false;
		// clear messages
		\Installer::getInstance()->getMessages();

		$result = [];

		foreach ($requirements as $requirementData)
		{
			$requirementClassName = "\\Requirements\\{$requirementData['type']}";
			if (!class_exists($requirementClassName))
			{
				throw new \UndefinedRequirementTypeRequestedException($requirementData['type']);
			}
			/**
			 * @var \Requirements\Requirement $requirement
			 */
			$requirement = new $requirementClassName($requirementData);
			if ($requirement->isValid())
			{
				$status = 'success';
			}
			elseif ($requirement->isMandatory())
			{
				\Installer::getInstance()->writeLog($requirement->getFailureMessage(), "error");
				$hasError = true;
				$status = 'error';
			}
			else
			{
				\Installer::getInstance()->writeLog($requirement->getFailureMessage(), "warning");
				\Installer::getInstance()->writeMessage($requirement->getFailureMessage(), "warning");
				$status = 'warning';
			}

			$result[$requirement->getCaption()] = [
				'status' => $status,
				'message' => $requirement->getFailureMessage()
			];
		}

		$template = new \TemplateProcessor\Template();
		$template->result = $result;
		$template->display('files/requirements.tpl');

		if ($hasError) {
			throw new \InstallationFailedException('Hosting is not compatible.', true);
		}

		$template->actionNext = true;
		$template->display('files/default_button_set.tpl');

		throw new \WaitForUserInputException();
	}
}
}

namespace Tasks {

	class DBApply extends AbstractTask
	{
		public function __invoke()
		{
			$files = $this->getFiles();
			if (empty($files))
			{
				\Installer::getInstance()->writeLog("There is no sql file to apply", "info");
				return true;
			}

			$data = \Installer::getInstance()->getDataForForm($this->data['dataSet']);

			try
			{
				$dbh = new \PDO("mysql:dbname={$data['dbName']};host={$data['dbHost']};charset=utf8", $data['dbUser'], $data['dbPassword']);
			}
			catch (\PDOException $e)
			{
				throw new \InstallationFailedException("Connection failed: " . $e->getMessage());
			}

			$commands = array();
			set_time_limit(0);

			foreach ($files as $file)
			{
				\Installer::getInstance()->writeLog("Applying DB dump file: " . $file);
				if (!$sqlFile = @fopen($file, "r"))
				{
					\Installer::getInstance()->writeLog("Cannot read sql file: " . $file, "error");
					throw new \InstallationFailedException("Cannot read sql file: " . $file);
				}
				$sqlQuery = fread($sqlFile, filesize($file));
				fclose($sqlFile);
				$this->PMA_splitSqlFile($commands, $sqlQuery);
			}

			foreach ($commands as $command)
			{
				if ($command['empty'] || empty ($command['query']))
					continue;
				$command['query'] = trim($command['query']);

				if ($dbh->exec($command['query']) === false)
				{
					list(, $dbErrorCode, $dbErrorMessage) = $dbh->errorInfo();
					$errorMessage = "Cannot execute MySQL query: #{$dbErrorCode} - {$dbErrorMessage}";
					\Installer::getInstance()->writeLog($errorMessage, "error");
					throw new \InstallationFailedException($errorMessage);
				}
			}

			\Installer::getInstance()->writeLog("Applied dump file successfully...", "success");
		}

		private function PMA_splitSqlFile(&$ret, $sql, $release = 3)
		{
			// do not trim, see bug #1030644
			//$sql          = trim($sql);
			$sql = rtrim($sql, "\n\r");
			$sql_len = strlen($sql);
			$char = '';
			$string_start = '';
			$in_string = FALSE;
			$nothing = TRUE;
			$time0 = time();

			for ($i = 0; $i < $sql_len; ++$i)
			{
				$char = $sql[$i];

				// We are in a string, check for not escaped end of strings except for
				// backquotes that can't be escaped
				if ($in_string)
				{
					for (; ;)
					{
						$i = strpos($sql, $string_start, $i);
						// No end of string found -> add the current substring to the
						// returned array
						if (!$i)
						{
							$ret[] = array('query' => $sql, 'empty' => $nothing);
							return TRUE;
						}
						// Backquotes or no backslashes before quotes: it's indeed the
						// end of the string -> exit the loop
						else {
							if ($string_start == '`' || $sql[$i - 1] != '\\')
							{
								$string_start = '';
								$in_string = FALSE;
								break;
							}
							// one or more Backslashes before the presumed end of string...
							else
							{
								// ... first checks for escaped backslashes
								$j = 2;
								$escaped_backslash = FALSE;
								while ($i - $j > 0 && $sql[$i - $j] == '\\')
								{
									$escaped_backslash = !$escaped_backslash;
									$j++;
								}
								// ... if escaped backslashes: it's really the end of the
								// string -> exit the loop
								if ($escaped_backslash)
								{
									$string_start = '';
									$in_string = FALSE;
									break;
								}
								// ... else loop
								else
								{
									$i++;
								}
							}
						} // end if...elseif...else
					} // end for
				} // end if (in string)

				// lets skip comments (/*, -- and #)
				else if (($char == '-' && $sql_len > $i + 2 && $sql[$i + 1] == '-' && $sql[$i + 2] <= ' ') || $char == '#' || ($char == '/' && $sql_len > $i + 1 && $sql[$i + 1] == '*'))
				{
					$i = strpos($sql, $char == '/' ? '*/' : "\n", $i);
					// didn't we hit end of string?
					if ($i === FALSE)
					{
						break;
					}
					if ($char == '/') $i++;
				}

				// We are not in a string, first check for delimiter...
				else if ($char == ';')
				{
					// if delimiter found, add the parsed part to the returned array
					$ret[] = array('query' => substr($sql, 0, $i), 'empty' => $nothing);
					$nothing = TRUE;
					$sql = ltrim(substr($sql, min($i + 1, $sql_len)));
					$sql_len = strlen($sql);
					if ($sql_len)
					{
						$i = -1;
					}
					else
					{
						// The submited statement(s) end(s) here
						return TRUE;
					}
				} // end else if (is delimiter)

				// ... then check for start of a string,...
				else if (($char == '"') || ($char == '\'') || ($char == '`'))
				{
					$in_string = TRUE;
					$nothing = FALSE;
					$string_start = $char;
				} // end else if (is start of string)

				elseif ($nothing)
				{
					$nothing = FALSE;
				}

				// loic1: send a fake header each 30 sec. to bypass browser timeout
				$time1 = time();
				if ($time1 >= $time0 + 30)
				{
					$time0 = $time1;
					header('X-pmaPing: Pong');
				} // end if
			} // end for

			// add any rest to the returned array
			if (!empty($sql) && preg_match('@[^[:space:]]+@', $sql))
			{
				$ret[] = array('query' => $sql, 'empty' => $nothing);
			}

			return TRUE;
		}
	}
}

namespace Tasks
{
	class DefineAdminCredentials extends \Tasks\AbstractTask
	{
		public function __invoke()
		{
			if (isset($this->data['message']))
			{
				\Installer::getInstance()->writeMessage($this->data['message'], 'info', 'description');
			}
			$data = \Installer::getInstance()->getDataForForm($this->data['dataSet']);
			$dbData = \Installer::getInstance()->getDataForForm($this->data['dbDataSet']);

			try
			{
				$dbh = new \PDO("mysql:dbname={$dbData['dbName']};host={$dbData['dbHost']};charset=utf8", $dbData['dbUser'], $dbData['dbPassword']);
			}
			catch (\PDOException $e)
			{
				throw new \InstallationFailedException("Connection failed: " . $e->getMessage());
			}

			\Installer::getInstance()->writeLog("Writing administrator configuration...");

			$this->dbQuery($dbh, "TRUNCATE TABLE `core_administrator`");
			$this->dbQuery($dbh, "INSERT INTO `core_administrator`(`username`, `password`, `group`) VALUES(?, PASSWORD(?), 'admin')", array($data['adminUsername'], $data['adminPassword']));
			$this->dbQuery($dbh, "UPDATE `core_settings` SET value = ? WHERE name = 'system_email'", array($data['systemEmail']));

			\Installer::getInstance()->writeLog("Defined admin credentials successfully...", "success");
		}

		/**
		 * @param \PDO $dbh
		 * @param string $query
		 * @param array $params
		 * @throws \InstallationFailedException
		 */
		private function dbQuery($dbh, $query, $params = array())
		{
			$sth = $dbh->prepare($query);
			if (!$sth->execute($params))
			{
				list(, $dbErrorCode, $dbErrorMessage) = $sth->errorInfo();
				$errorMessage = "Cannot execute MySQL query: #{$dbErrorCode} - {$dbErrorMessage}";
				\Installer::getInstance()->writeLog($errorMessage, "error");
				throw new \InstallationFailedException($errorMessage);
			}

		}
	}
}

namespace Tasks
{
	class DefineLocalSettings extends AbstractTask
	{
		public function __invoke()
		{
			$data = \Installer::getInstance()->getDataForForm($this->data['dataSet']);

			\Installer::getInstance()->writeLog("Defining local settings...");

			$config = array
			(
				'DBHost' => $data['dbHost'],
				'DBUser' => $data['dbUser'],
				'DBPassword' => $data['dbPassword'],
				'DBName' => $data['dbName'],
				'MySQLCharset' => $this->data['charset'],
			);
			$baseUrl = \Installer::getInstance()->getBaseUrl();
			$frontEndConfig = array_merge($config, array('SiteUrl' => $baseUrl));
			$adminPanelConfig = array_merge($config, array('SiteUrl' => $baseUrl . '/admin'));

			$this->rewriteConfigFile($frontEndConfig, 'apps/FrontEnd/config/local.ini');
			$this->rewriteConfigFile($adminPanelConfig, 'apps/AdminPanel/config/local.ini');

            $mobileConfigIniPath = 'apps/MobileFrontEnd/config/local.ini';
            $mobileFrontEndUrl = $this->getMobileFrontendUrlFromLicense();
            if (file_exists($mobileConfigIniPath))
            {
                if (!$mobileFrontEndUrl)
                {
                    $mobileFrontEndUrl = $baseUrl . '/m';
                }
                $mobileFrontEndConfig = array_merge($config, array('SiteUrl' => $mobileFrontEndUrl));
                $this->rewriteConfigFile($mobileFrontEndConfig, 'apps/MobileFrontEnd/config/local.ini');
            }
            
			\Installer::getInstance()->writeLog("Defined local settings successfully...", "success");
		}

		private function rewriteConfigFile($config, $fileName)
		{
			$fileContent = "";
			foreach ($config as $key => $value)
			{
				$fileContent .= $key . " = \"" . addcslashes($value, '"\\') . "\"\n";
			}
			if (file_put_contents($fileName, $fileContent) === false)
			{
				\Installer::getInstance()->writeLog("Cannot rewrite \"{$fileName}\" file...", "error");
				throw new \InstallationFailedException("Cannot rewrite \"{$fileName}\" file!");
			}
		}
        
		private function getMobileFrontendUrlFromLicense()
		{
			if (!file_exists('license')) 
            {
                return false;
            }
			$data = parse_ini_file('license');
            
			return isset($data['MobileFrontEnd_site_url']) ? $data['MobileFrontEnd_site_url'] : false;
		}
	}
}

namespace Tasks
{
	class DeleteFilesViaFtp extends AbstractTask
	{
		/**
		 * @var \FtpClient
		 */
		private $ftpClient;

		public function __invoke()
		{
			$data = \Installer::getInstance()->getDataForForm($this->data['dataSet']);

			$this->ftpClient = \Installer::getInstance()->getFtpClient($data['ftpHost'], $data['ftpPort'], $data['ftpUser'], $data['ftpPassword'], $data['ftpDirectory']);

			$files = $this->getFiles();
			$files = array_filter($files, array($this, 'fileExists'));

			$deletedFiles = array();
			$failedFiles = array();

			foreach ($files as $file)
			{
				if ($this->deleteFilesRecursively($file))
				{
					$deletedFiles[] = $file;
				}
				else
				{
					$failedFiles[] = $file;
				}
			}
			if (!empty($deletedFiles))
			{
				$list = sprintf("'%s'", join("', '", $deletedFiles));
				\Installer::getInstance()->writeLog("Files listed below were successfully deleted: " . $list, "success");
			}
			if (!empty($failedFiles))
			{
				\Installer::getInstance()->writeMessage("The specified FTP user does not have enough rights to delete the following files: \n<ul><li>" . implode("</li><li>", $failedFiles) . "</li><ul>\n", "error");
				throw new \StepFailedException("Please specify an FTP user which has enough rights to delete files or delete them manually.");
			}
		}

		private function fileExists($file)
		{
			return !empty($file) && file_exists(\Installer::getInstance()->getPathToApplicationRoot() . $file);
		}

		private function deleteFilesRecursively($pathToFile)
		{
			if (is_file(\Installer::getInstance()->getPathToApplicationRoot() . $pathToFile))
			{
				return $this->ftpClient->delete($pathToFile);
			}
			if (is_dir(\Installer::getInstance()->getPathToApplicationRoot() . $pathToFile))
			{
				return $this->deleteDirectory($pathToFile);
			}
		}

		private function deleteDirectory($pathToFile)
		{
			$currentDir = getcwd();
			chdir(\Installer::getInstance()->getPathToApplicationRoot());
			/**
			 * @var \SplFileInfo[] $iterator
			 */
			$iterator = new \RecursiveIteratorIterator(new \RecursiveDirectoryIterator($pathToFile, \FilesystemIterator::SKIP_DOTS), \RecursiveIteratorIterator::CHILD_FIRST);

			$dirs = array();
			$files = array();
			foreach ($iterator as $currentFile)
			{
				if ($currentFile->isDir())
				{
					$dirs[] = (string) $currentFile;
				}
				else
				{
					$files[] = (string) $currentFile;
				}
			}
			$dirs[] = $pathToFile;
			$dirs = array_unique($dirs);

			usort($dirs, function ($a, $b) {
				return strlen($b) - strlen($a);
			});

			chdir($currentDir);

			$filesDeletionResult = array_map(array($this->ftpClient, 'delete'), $files);
			$dirsDeletionResult = array_map(array($this->ftpClient, 'rmdir'), $dirs);

			return !in_array(false, $filesDeletionResult) && !in_array(false, $dirsDeletionResult);
		}
	}
}


namespace Tasks {

class DisplayTemplate extends AbstractTask
{
	public function __invoke()
	{
		if (isset($_REQUEST['actionNext']))
		{
			return;
		}
		
		$template = new \TemplateProcessor\Template();
		$template->baseUrl = \Installer::getInstance()->getBaseUrl() . "/";
		$template->product_name = \Installer::getInstance()->getReplacementVar('product');
		$template->site_url = \Installer::getInstance()->getReplacementVar('siteUrl');
		$template->display('files/' . $this->data['templateFileName']);
		
		$waitForConfirmation = isset($this->data['waitForConfirmation']) ? $this->data['waitForConfirmation'] : false;
		if ($waitForConfirmation)
		{
			$template->actionNext = true;
			$template->display('files/default_button_set.tpl');
			
			throw new \WaitForUserInputException();
		}
	}
}
}

namespace Tasks {
	class GenerateLicense extends AbstractTask
	{

		public function __invoke()
		{
			if (file_exists('license') || $_SERVER['HTTP_HOST'] == 'localhost')
				throw new \SkipActionException();

			$this->check();

			if (isset($this->data['message'])) {
				\Installer::getInstance()->writeMessage($this->data['message'], 'info', 'description');
			}

			$data = \Installer::getInstance()->getDataForForm($this->data['dataSet']);

			$data['FrontEnd_site_url'] = \Installer::getInstance()->getBaseUrl();
			$data['product_name'] = $this->config['product'];
			$data['product_version'] = $this->config['version'];
			$data['action'] = 'GenerateLicense';
			$this->generate($data);
		}

		private function generate($data)
		{

			\Installer::getInstance()->writeLog("Try License generate");
			$post_string = http_build_query($data);
			$parts = parse_url(\Installer::getInstance()->getConfig('licenseWorksforweb'));

			@$fp = fsockopen($parts['host'],
				isset($parts['port']) ? $parts['port'] : 80,
				$errNo, $errStr, 30);

			if (false === $fp) {
				\Installer::getInstance()->writeLog("Can not connect to remote server", "error");
				return;
			}

			$out = "POST " . $parts['path'] . " HTTP/1.1\n";
			$out .= "Host: " . $parts['host'] . "\n";
			$out .= "Content-Type: application/x-www-form-urlencoded\n";
			$out .= "Content-Length: " . strlen($post_string) . "\n";
			$out .= "Connection: Close\n\n";
			if (!empty($post_string)) {
				$out .= $post_string;
			}
			fwrite($fp, $out);
			fclose($fp);
			\Installer::getInstance()->writeLog("License was generated successful and send to your E-mail");
		}

		private function check()
		{
			$post_string = http_build_query(array(
				'FrontEnd_site_url' => \Installer::getInstance()->getBaseUrl(),
				'action' => 'check',
			));
			$parts = parse_url(\Installer::getInstance()->getConfig('licenseWorksforweb') . 'system/licenses/installation_license/');

			@$fp = fsockopen($parts['host'],
				isset($parts['port']) ? $parts['port'] : 80,
				$errNo, $errStr, 30);

			if (false === $fp) {
				\Installer::getInstance()->writeLog("Can not connect to remote server", "error");
				return;
			}

			$out = "POST " . $parts['path'] . " HTTP/1.1\n";
			$out .= "Host: " . $parts['host'] . "\n";
			$out .= "Content-Type: application/x-www-form-urlencoded\n";
			$out .= "Content-Length: " . strlen($post_string) . "\n";
			$out .= "Connection: Close\n\n";
			if (!empty($post_string)) {
				$out .= $post_string;
			}
			fwrite($fp, $out);

			$isBody = false;
			$message = '';
			while (!feof($fp)) {
				$buf = fgets($fp, 1024);

				if ($isBody) {
					$message .= $buf;
				}

				if ($buf == "\r\n") {
					$isBody = true;
				}
			}
			fclose($fp);
			if (trim($message) == 'Yes')
				throw new \SkipActionException();
		}
	}
}

namespace Tasks
{
	class InstallAllModules extends \Tasks\AbstractTask
	{
		public function __invoke()
		{
			$curl = \Installer::getInstance()->getCurlSession("installAllModules");

			if (isset($this->data['message']))
			{
				$message = \Installer::getInstance()->replaceMessageVarsToValues($this->data['message']);
				\Installer::getInstance()->writeMessage($message, 'info', 'description');
			}
			$adminData = \Installer::getInstance()->getDataForForm($this->data['adminDataSet']);
			$adminPanelUrl = \Installer::getInstance()->getBaseUrl() . "/admin/";

			\Installer::getInstance()->writeLog("Installation of all modules step:");
			try
			{
				$validator = new \Validators\LicenseExistAndValid();
				$validator->validate(array());
			}
			catch (\StepFailedException $e)
			{
				\Installer::getInstance()->writeLog($e->getMessage(), "error");
				throw new \InstallationFailedException($e->getMessage() . ' Please obtain the license from <a href="http://license.worksforweb.com/">http://license.worksforweb.com/</a> to continue with the module installation.');
			}

			$curl->request(
				$adminPanelUrl,
				array(
					'action' => 'login',
					'admin_username' => $adminData['adminUsername'],
					'admin_password' => $adminData['adminPassword']
				),
				'POST'
			);
			$curl->request(
				$adminPanelUrl . 'system/module_manager/manage_modules/',
				array(
					'action' => 'installAll'
				)
			);

            $curl->request(
                \Installer::getInstance()->getBaseUrl(),
                array(
                    'SYSCOMMAND'=>'CLEAR_MODULE_FUNCTION_INFO_CACHE'
                )
            );

			\Installer::getInstance()->writeLog("All modules successfully installed", "success");
		}

	}
}


namespace Tasks
{
	class MoveDirectoryContentToApplicationRootViaFtp extends AbstractTask
	{
		/**
		 * @var \FtpClient
		 */
		private $ftpClient;

		public function __invoke()
		{
			$data = \Installer::getInstance()->getDataForForm($this->data['dataSet']);
			$this->ftpClient = \Installer::getInstance()->getFtpClient($data['ftpHost'], $data['ftpPort'], $data['ftpUser'], $data['ftpPassword'], $data['ftpDirectory']);

			$upgradePatchDirBaseName = basename(dirname(__FILE__));

			// to be on the same dir in php and ftp
			chdir(\Installer::getInstance()->getPathToApplicationRoot());

			$from = $upgradePatchDirBaseName . "/" . $this->data['dir'] . "/";
			$to = "./";

			if (!empty($this->data['to']))
			{
				$to .= $this->data['to'] . "/";
				\Installer::getInstance()->writeLog(sprintf("Moving '%s' directory files to the '%s' dir of the application", $this->data['dir'], $this->data['to']));
			}
			else
			{
				\Installer::getInstance()->writeLog(sprintf("Moving '%s' directory files to the root of the application", $this->data['dir']));
			}

			$it = new \DirectoryIterator($from);
			/**
			 * @var \DirectoryIterator $file
			 */
			foreach ($it as $file)
			{
				if ($file->isDot()) continue;
				if ($file->isFile())
				{
					$this->moveFile((string) $file, $from, $to);
				}
				elseif ($file->isDir())
				{
					$this->moveDir((string) $file, $from, $to);
				}
			}

			// return to upgrade patch directory
			chdir($upgradePatchDirBaseName);
		}

		private function moveFile($file, $from, $to)
		{
			if (file_exists($file))
			{
				$this->ftpClient->delete($to . $file);
			}
			$this->ftpClient->rename($from . $file, $to . $file);

		}
		private function moveDir($dir, $from, $to)
		{
			if (!file_exists($to . $dir))
			{
				$this->ftpClient->rename($from . $dir, $to . $dir);
			}
			else
			{
				$it = new \DirectoryIterator($from . $dir);
				/**
				 * @var \DirectoryIterator $file
				 */
				foreach ($it as $file)
				{
					if ($file->isDot()) continue;
					if ($file->isFile())
					{
						$this->moveFile($dir . "/" . $file, $from, $to);
					}
					elseif ($file->isDir())
					{
						$this->moveDir($dir . "/" . $file, $from, $to);
					}
				}
				$this->ftpClient->rmdir($from . $dir);
			}
		}
	}
}


namespace Tasks {
	class PlaceLicense extends AbstractTask
	{

		public function __invoke()
		{
			if (file_exists('license') || $_SERVER['HTTP_HOST'] == 'localhost')
				throw new \SkipActionException();

			if (isset($this->data['message'])) {
				\Installer::getInstance()->writeMessage($this->data['message'], 'info', 'description');
			}

			$ftpdata = \Installer::getInstance()->getDataForForm($this->data['dataSet']);

			$this->placeLicense($ftpdata);
		}

		private function placeLicense($ftpData)
		{
			$license = $this->getLicense();
			$tmpLicense = tmpfile();
			fwrite($tmpLicense, $license);
			fseek($tmpLicense, 0);

			$ftpResource = @ftp_connect($ftpData['ftpHost'], $ftpData['ftpPort']);
			@ftp_login($ftpResource, $ftpData['ftpUser'], $ftpData['ftpPassword']);
			$ftpDirectory = $ftpData['ftpDirectory'];
			if (!empty($ftpDirectory) && $ftpDirectory{strlen($ftpDirectory) - 1} != '/') {
				$ftpDirectory .= '/';
			}
			if ($ftpDirectory{0} != '/') {
				$ftpDirectory = './' . $ftpDirectory;
			}
			if (@ftp_fput($ftpResource, $ftpDirectory . 'license', $tmpLicense, FTP_BINARY) === false) {
				throw new \StepFailedException("License Upload Failed");
			}
			fclose($tmpLicense);
			if (@ftp_site($ftpResource, "CHMOD {$this->data['mode']} " . $ftpDirectory . 'license') === false) {
				\Installer::getInstance()->writeLog("Cannot change mode of license", "error");
			}

			\Installer::getInstance()->writeLog("Placed License to root", "success");
		}

		private function getLicense()
		{
			if (isset($this->data['LicenseVerificationCodeMessage']))
			{
				$message = \Installer::getInstance()->replaceMessageVarsToValues($this->data['LicenseVerificationCodeMessage']);
				\Installer::getInstance()->writeMessage($message, 'info', 'description');
			}
			$verificationData = \Installer::getInstance()->getDataForForm($this->data['verificationData']);
			$post_string = http_build_query(array(
				'action' => 'getLicense',
				'site_url' => \Installer::getInstance()->getBaseUrl(),
				'code' => $verificationData['code'],
			));
			$parts = parse_url(\Installer::getInstance()->getConfig('licenseWorksforweb') . 'system/licenses/installation_license/');

			@$fp = fsockopen($parts['host'],
				isset($parts['port']) ? $parts['port'] : 80,
				$errNo, $errStr, 30);

			if (false === $fp) throw new \StepFailedException("Can not connect to remote server", "error");

			$out = "POST " . $parts['path'] . " HTTP/1.1\n";
			$out .= "Host: " . $parts['host'] . "\n";
			$out .= "Content-Type: application/x-www-form-urlencoded\n";
			$out .= "Content-Length: " . strlen($post_string) . "\n";
			$out .= "Connection: Close\n\n";
			if (!empty($post_string)) {
				$out .= $post_string;
			}
			fwrite($fp, $out);

			$isBody = false;
			$license = '';
			while (!feof($fp)) {
				$buf = fgets($fp, 1024);

				if ($isBody) {
					$license .= $buf;
				}

				if ($buf == "\r\n") {
					$isBody = true;
				}
			}
			fclose($fp);
			if (empty($license)) throw new \StepFailedException('Not loaded License try again');
			return $license;
		}
	}
}

namespace Tasks
{
	class RequestFrontEnd extends AbstractTask
	{
		const REQUIRED_MINIMAL_MEMORY_LIMIT = "64M";

		public function __invoke()
		{
			\Installer::getInstance()->writeLog("Requesting FrontEnd via cURL...");

			$rebuildInterfacesCachePartial = $this->needToRebuildInterfacesCachePartial();
			if ($rebuildInterfacesCachePartial)
			{
				\Installer::getInstance()->writeLog("PHP memory_limit is lower than the required. The system will try to rebuild interfaces cache partially.", "warning");
			}

			$url = \Installer::getInstance()->getBaseUrl() . '/?SYSCOMMAND=SETUP_ENVIRONMENT&rebuildInterfacesCachePartial=' . (int) $rebuildInterfacesCachePartial;
			$serverResponse = $this->curlRequest($url);
			if ($serverResponse['status'] != 204)
			{
				$log = "cUrl request to {$url} failed! " . \Installer::getInstance()->getReplacementVar('product') . "'s response was as follows: <br />";
				if (!empty($serverResponse['response']))
				{
					$log .= $serverResponse['response'];
				}
				else
				{
					$log .= 'UNKNOWN ERROR (server left a blank response)';
				}
				\Installer::getInstance()->writeLog($log, "error");
				throw new \InstallationFailedException($this->data['failureMessage']);
			}

			\Installer::getInstance()->writeLog("cURL request success...", "success");
		}

		private function needToRebuildInterfacesCachePartial()
		{
			$memoryLimit = ini_get("memory_limit");
			if (!empty($memoryLimit) &&
					$this->convertToBytes($memoryLimit) < $this->convertToBytes(self::REQUIRED_MINIMAL_MEMORY_LIMIT))
			{
				return true;
			}
			return false;
		}

		private function convertToBytes($value)
		{
		    $value = trim($value);
		    $last = strtolower($value[strlen($value)-1]);
		    switch($last)
		    {
		        case 'g':
		            $value *= 1024;
		        case 'm':
		            $value *= 1024;
		        case 'k':
		            $value *= 1024;
		    }
			return $value;
		}

		private function curlRequest($url)
		{
			$curl = curl_init($url);
			curl_setopt($curl, CURLOPT_HEADER, 0);
			curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);
			curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
			curl_setopt($curl, CURLOPT_TIMEOUT, 60);
			curl_setopt($curl, CURLOPT_FOLLOWLOCATION, 1);
			if (isset($_SERVER['PHP_AUTH_USER'], $_SERVER['PHP_AUTH_PW']))
			{
				curl_setopt($curl, CURLOPT_HTTPAUTH, CURLAUTH_ANY);
				curl_setopt($curl, CURLOPT_USERPWD, "{$_SERVER['PHP_AUTH_USER']}:{$_SERVER['PHP_AUTH_PW']}");
			}
			$response = curl_exec($curl);
			$status = curl_getinfo($curl, CURLINFO_HTTP_CODE);
			curl_close($curl);
			return array('status' => $status, 'response' => $response);
		}
	}
}

namespace Tasks {

class RequestUserInput extends AbstractTask
{
	public function __invoke()
	{
		$forms = \Installer::getInstance()->getFormsData();
		$formData = $forms[$this->data['formName']];
		$action = \Installer::getInstance()->getRequestValue('action');

		if ($action == "Next")
		{

			$data = array();
			foreach ($formData['fields'] as $name => $field)
			{
				$data[$name] = \Installer::getInstance()->getRequestValue($name);
			}

			\Installer::getInstance()->setData("lastFormData", $data);

			if (isset($formData['validator']))
			{
				$validatorClassName = "\\Validators\\" . $formData['validator'];
				$validator = new $validatorClassName();
				$validator->validate($data);
			}

			\Installer::getInstance()->setDataForForm($this->data['formName'], $data);
			unset($_REQUEST['action']);
		}
		elseif ($action == "Skip")
		{
			throw new \SkipActionException();
		}
		else
		{
			$data = \Installer::getInstance()->getData("lastFormData");
			foreach ($formData['fields'] as $name => &$field)
			{
				if (isset($data[$name]))
				{
					$field['value'] = $data[$name];
				}
				elseif (strpos($field['default'], 'php_function:') === 0)
				{
					$function = substr($field['default'], 13);
					$result = $function();
					$field['value'] = $result;
				}
				else
				{
					$field['value'] = $field['default'];
				}
			}
			$this->displayForm($formData);
			throw new \WaitForUserInputException();
		}
	}

	private function displayForm($formData)
	{
		$template = new \TemplateProcessor\Template();
		$template->caption = $formData['caption'];
		$template->messages = \Installer::getInstance()->getMessages();
		$template->fields = $formData['fields'];
		$template->skipable = $this->data['skipable'];
		$templateName = !empty($formData['templateFileName']) ? "files/" . $formData['templateFileName'] : "files/default_form.tpl";
		$template->display($templateName);

	}
}
}

namespace Tasks
{
	class SetCharacterSet extends AbstractTask
	{
		/**
		 * @var \PDO
		 */
		private $dbConnection;

		public function __invoke()
		{
			if (isset($this->data['message']))
			{
				\Installer::getInstance()->writeMessage($this->data['message'], 'info', 'description');
			}
			$data = \Installer::getInstance()->getDataForForm($this->data['dataSet']);
			$charset = $this->data['charset'];

			try
			{
				$dbh = new \PDO("mysql:dbname={$data['dbName']};host={$data['dbHost']};charset=utf8", $data['dbUser'], $data['dbPassword']);
			}
			catch (\PDOException $e)
			{
				throw new \InstallationFailedException("Connection failed: " . $e->getMessage());
			}

			$this->dbConnection = $dbh;

			\Installer::getInstance()->writeLog("Setting character set to \"{$charset}\"..." );

			if ($this->sqlVersionAbove41())
			{
				if ($this->getCurrentCharacterSet() != $charset)
				{
					if ($this->isCharsetAvailable($charset))
					{
						if (!$this->setCharacterSet($data['dbName'], $charset))
						{
							\Installer::getInstance()->writeLog("Cannot set charset.", "warning");
						}
					}
					else
					{
						\Installer::getInstance()->writeLog("\"{$charset}\" charset is unavailable. Cannot set charset.", "warning");
					}
				}
			}
			else
			{
				\Installer::getInstance()->writeLog("SQL version is below 4.1. Cannot set charset.", "warning");
			}
		}

		private function sqlVersionAbove41()
		{
			$versionNumber = $this->dbConnection->query("SHOW variables LIKE 'version'", \PDO::FETCH_COLUMN, 1)->fetch();
			$parts = preg_split('[/.-]', $versionNumber);
			return !($parts[0] < 4 || $parts[0] == 4 && $parts[1] < 1);
		}

		private function isCharsetAvailable($charset)
		{
			$sth = $this->dbConnection->prepare("SHOW CHARACTER SET LIKE ?");
			$sth->execute(array($charset));
			return $sth->fetch() !== false;
		}
		private function getCurrentCharacterSet()
		{
			return $this->dbConnection->query("SHOW variables LIKE 'character_set_database'", \PDO::FETCH_COLUMN, 1)->fetch();
		}

		private function setCharacterSet($dbname, $charset)
		{
			return $this->dbConnection->exec("ALTER DATABASE `{$dbname}` CHARACTER SET '{$charset}'") !== false;
		}
	}
}

namespace Tasks
{
	class UpgradeModules extends AbstractTask
	{
		public function __invoke()
		{
			$adminData = \Installer::getInstance()->getDataForForm($this->data['dataSet']);

			\Installer::getInstance()->writeLog("Upgrading modules started...");

			$curl = \Installer::getInstance()->getCurlSession("upgradeModules");

			$adminPanelMainPageUrl = \Installer::getInstance()->getAdminPanelUrl() . "/";

			\Installer::getInstance()->writeLog("Logging in to the admin panel...");
			$curl->request(
				$adminPanelMainPageUrl,
				array(
					'action' => 'login',
					'admin_username' => $adminData['adminUsername'],
					'admin_password' => $adminData['adminPassword']
				),
				'POST'
			);

			\Installer::getInstance()->writeLog("Requesting for the upgrade all modules action...");
			$curl->request(
				$adminPanelMainPageUrl . 'system/module_manager/manage_modules/',
				array(
					'action' => 'upgradeAll'
				)
			);

			\Installer::getInstance()->writeLog("All modules are successfully upgraded.", "success");
		}
	}
}


namespace Tasks
{
	class UploadLicense extends \Tasks\AbstractTask
	{
		public function __invoke()
		{
			if (isset($this->data['FtpCredentialsMessage']))
			{
				$message = \Installer::getInstance()->replaceMessageVarsToValues($this->data['FtpCredentialsMessage']);
				\Installer::getInstance()->writeMessage($message, 'info', 'description');
			}

			if (file_exists('license'))
				throw new \SkipActionException();

            $mode = $this->data['mode'];
			$ftpData = \Installer::getInstance()->getDataForForm($this->data['FTPDataSet']);
            
			if (isset($this->data['LicenseUploadMessage']))
			{
				$message = \Installer::getInstance()->replaceMessageVarsToValues($this->data['LicenseUploadMessage']);
				\Installer::getInstance()->writeMessage($message, 'info', 'description');
			}
			\Installer::getInstance()->getDataForForm($this->data['dataSet']);
			\Installer::getInstance()->writeLog("Upload License step:");
            
			if (isset($_FILES['licenseFile']))
			{
				if ($_FILES['licenseFile']['error'] !== UPLOAD_ERR_OK)
				{
					throw new UploadException($_FILES['licenseFile']['error']);
				}
				else
				{
					$ftpResource = @ftp_connect($ftpData['ftpHost'], $ftpData['ftpPort']);
					@ftp_login($ftpResource, $ftpData['ftpUser'], $ftpData['ftpPassword']);
					$ftpDirectory = $ftpData['ftpDirectory'];
					if (!empty($ftpDirectory) && $ftpDirectory{strlen($ftpDirectory) - 1} != '/')
                    {
                        $ftpDirectory .= '/';
                    }
					if ($ftpDirectory{0} != '/')
                    {
                        $ftpDirectory = './' . $ftpDirectory;
                    }
					if (@ftp_put($ftpResource, $ftpDirectory . 'license', $_FILES['licenseFile']['tmp_name'], FTP_BINARY) === false)
					{
						throw new \StepFailedException("License Upload Failed");
					}
                    if (@ftp_site($ftpResource, "CHMOD $mode " . $ftpDirectory . 'license') === false)
                    {
                        \Installer::getInstance()->writeLog("Cannot change mode of license", "error");
                    }
				}
			}

			\Installer::getInstance()->writeLog("License successfully uploaded", "success");
		}

	}

	class UploadException extends \StepFailedException
	{
		public function __construct($code) {
			$message = $this->codeToMessage($code);
			parent::__construct($message);
		}

		private function codeToMessage($code)
		{
			switch ($code) {
				case UPLOAD_ERR_INI_SIZE:
					$message = "The uploaded file exceeds the upload_max_filesize directive in php.ini";
					break;
				case UPLOAD_ERR_FORM_SIZE:
					$message = "The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the HTML form";
					break;
				case UPLOAD_ERR_PARTIAL:
					$message = "The uploaded file was only partially uploaded";
					break;
				case UPLOAD_ERR_NO_FILE:
					$message = "No file was uploaded";
					break;
				case UPLOAD_ERR_NO_TMP_DIR:
					$message = "Missing a temporary folder";
					break;
				case UPLOAD_ERR_CANT_WRITE:
					$message = "Failed to write file to disk";
					break;
				case UPLOAD_ERR_EXTENSION:
					$message = "File upload stopped by extension";
					break;

				default:
					$message = "Unknown upload error";
					break;
			}
			return $message;
		}
	}

}


namespace Tasks
{
	class WriteHtaccess extends AbstractTask
	{
		public function __invoke()
		{
			$path = $this->data['pathToHtaccess'];

			$pathToHtaccess = "." . $path . ".htaccess";
			$rewriteBasePath = '';
			$urlParams = parse_url(\Installer::getInstance()->getBaseUrl());
			if (isset ($urlParams['path'])) $rewriteBasePath = trim($urlParams['path']);

			\Installer::getInstance()->writeLog("Writing .htaccess file in \"{$pathToHtaccess}\"...");

			if (!$strings = @file($pathToHtaccess))
			{
				$message = "Cannot find .htaccess file. Please check file existing";
				\Installer::getInstance()->writeLog($message, "error");
				throw new \InstallationFailedException($message);
			}

			if (!$htaccess = @fopen($pathToHtaccess, 'w'))
			{
				$message = "Cannot open .htaccess file to write.";
				\Installer::getInstance()->writeLog($message, "error");
				throw new \InstallationFailedException($message);
			}

			foreach ($strings as $index => $cstr)
			{
				if (strpos($strings[$index], "RewriteBase") !== false)
				{
					$strings[$index] = "RewriteBase " . $rewriteBasePath . $path . "\r\n";
				}
				fputs ($htaccess, $strings[$index]);
			}

			fclose ($htaccess);
			\Installer::getInstance()->writeLog("Written .htaccess file successfully...", "success");
		}
	}
}

namespace TemplateProcessor {

class File
{
	private $filename;

	public function __construct($filename)
	{
		global $FILES;
		$this->filename = $filename;
		$this->allFiles = &$FILES;
	}

	public function getContentType()
	{
		$extension = pathinfo($this->filename, PATHINFO_EXTENSION);
		return isset(self::$typeMap[$extension]) ? self::$typeMap[$extension] : self::defaultType;
	}

	public function flushContent()
	{
		if (isset($this->allFiles[$this->filename]))
		{
			echo base64_decode($this->allFiles[$this->filename]);
		}
		else
		{
			$fh = fopen($this->filename, 'r');
			fpassthru($fh);
			fclose($fh);
		}
	}

	public function getContent()
	{
		if (isset($this->allFiles[$this->filename])) return base64_decode($this->allFiles[$this->filename]);
		return file_get_contents($this->filename);
	}

	const defaultType = "text/plain";
	private static $typeMap = array(
									'css' => 'text/plain',
									'gif' => 'image/gif',
									'png' => 'image/png',
									'jpg' => 'image/jpeg',
									);
}
}

namespace TemplateProcessor {

class Template
{
	private $variables = array();
	private $callbacks = array();
	private $templateName = null;
	private $_TemplateSupplier;

	public function __construct()
	{
		$this->_TemplateSupplier = new TemplateSupplier();
	}

	public function registerCallback($name, $callback)
	{
		$this->callbacks[$name] = $callback;
	}

	public function __set($name, $value)
	{
		$this->variables[$name] = $value;
	}

	public function __get($name)
	{
		if (isset($this->variables[$name]))
		{
			return $this->variables[$name];
		}
		else
		{
			throw new \Exception("Reference to an unknown variable \"$name\" in $this->templateName");
		}
	}

	public function __call($name, $args)
	{
		if (isset($this->callbacks[$name]))
		{
			return call_user_func_array($this->callbacks[$name],$args);
		}
		else
		{
			throw new \Exception("Call to an unknown callback \"$name()\" in $this->templateName");
		}
	}

	public function self($vars=array())
	{
		$template = new Template($this->templateName);
		foreach($vars as $name => $value)
		{
			$template->$name = $value;
		}
        return $template->getText();
	}

	function display($template_name)
	{
		$this->templateName = $template_name;
		$templateContents = $this->_TemplateSupplier->getTemplateContents($template_name);
		extract($this->variables);
		eval(' ?>' . $templateContents . ' ');
	}
	function fetch($template_name)
	{
		ob_start();
		$this->display($template_name);
		$contents = ob_get_contents();
		ob_end_clean();
		return $contents;
	}
}
}

namespace TemplateProcessor {

class TemplateSupplier
{
	public function getTemplateContents($filename)
	{
		$file = new File($filename);
		return $file->getContent();
	}
}
}

namespace Validators
{
	class AdminCredentials
	{
		public function validate($data)
		{
			if (empty($data['adminUsername'])) throw new \StepFailedException("Admin username is not specified.");
			if (empty($data['adminPassword'])) throw new \StepFailedException("Admin password is not specified.");
			if (empty($data['systemEmail'])) throw new \StepFailedException("System Email is not specified.");
		}
	}
}

namespace Validators
{
	class CanAdminLoginValidator
	{
		public function validate($data)
		{
			$installer = \Installer::getInstance();

			$adminPanelUrl = $installer->getAdminPanelUrl() . "/";
			$curl = $installer->getCurlSession("CanAdminLoginValidator");

			\Installer::getInstance()->writeLog("Checking admin credentials...");

			$result = $curl->request(
				$adminPanelUrl,
				array(
					'action' => 'login',
					'admin_username' => $data['adminUsername'],
					'admin_password' => $data['adminPassword']
				),
				'POST'
			);

			if ($result == 401)
			{
				\Installer::getInstance()->writeLog("Could not login to the admin panel. Login failed with \"401 Unauthorized\" status code.", "error");
				throw new \StepFailedException("Authorization failed");
			}

			\Installer::getInstance()->writeLog("Admin credentials are ok.", "success");
		}
	}
}


namespace Validators
{
	class DBCredentials
	{
		public function validate($data)
		{
			extract($data);

			if (empty($dbHost)) throw new \StepFailedException("Database host is not specified.");
			if (empty($dbUser)) throw new \StepFailedException("Database user is not specified.");
			if (empty($dbPassword)) throw new \StepFailedException("Database password is not specified.");
			if (empty($dbName)) throw new \StepFailedException("Database name is not specified.");

			\Installer::getInstance()->writeLog("Trying to connect to '{$dbHost}' server... (username: '{$dbUser}', password: '{$dbPassword}')");

			try
			{
				$dbh = new \PDO("mysql:dbname={$data['dbName']};host={$data['dbHost']};charset=utf8", $data['dbUser'], $data['dbPassword']);
			}
			catch (\PDOException $e)
			{
				$message = "Cannot connect to MySQL DB: " . $e->getMessage();
				\Installer::getInstance()->writeLog($message, "error");
				throw new \StepFailedException($message);
			}

			\Installer::getInstance()->writeLog("Connected to '{$dbHost}' successfully...", "success");
			\Installer::getInstance()->writeLog("Selected the database successfully...", "success");
		}
	}
}

namespace Validators
{
	class FTPCredentials
	{
		public function validate($data)
		{
			extract($data);

			if (empty($ftpHost)) throw new \StepFailedException("FTP host is not specified.");
			if (empty($ftpPort)) throw new \StepFailedException("FTP port is not specified.");
			if (empty($ftpDirectory)) throw new \StepFailedException("FTP directory is not specified.");
			if (empty($ftpUser)) throw new \StepFailedException("FTP user is not specified.");
			if (empty($ftpPassword)) throw new \StepFailedException("FTP password is not specified.");

			\Installer::getInstance()->writeLog("Connecting to FTP-Server \"{$ftpHost}:$ftpPort\"...");

			if (!function_exists ("ftp_connect"))
			{
				$message = "Your server does not support PHP's FTP-functions!";
				\Installer::getInstance()->writeLog($message, "error");
				throw new \StepFailedException($message);
			}

			if (!$ftpResource = @ftp_connect($ftpHost, $ftpPort, 10))
			{
				$message = "Cannot connect to FTP-Server!";
				\Installer::getInstance()->writeLog($message, "error");
				throw new \StepFailedException($message);
			}
			\Installer::getInstance()->writeLog("Connected to FTP-Server successfully", "success");

			\Installer::getInstance()->writeLog("FTP-Authorization... ({$ftpUser}:{$ftpPassword}@{$ftpHost}:{$ftpPort})");
			if ($logged = @ftp_login($ftpResource, $ftpUser, $ftpPassword) === false)
			{
				$message = "FTP-Authorization failed!";
				\Installer::getInstance()->writeLog($message, "error");
				throw new \StepFailedException($message);
			}
			\Installer::getInstance()->writeLog("FTP-Authorization success", "success");

			if (!empty($ftpDirectory) && $ftpDirectory{strlen($ftpDirectory) - 1} != '/') $ftpDirectory .= '/';
			if ($ftpDirectory{0} != '/') $ftpDirectory = './' . $ftpDirectory;

			\Installer::getInstance()->writeLog("Checking FTP directory... ({$ftpDirectory})");
			if (@ftp_chdir($ftpResource, $ftpDirectory) === false)
			{
				$message = "Specified directory doesn't exist!";
				\Installer::getInstance()->writeLog($message, "error");
				throw new \StepFailedException($message);
			}

			$fileList = @ftp_nlist($ftpResource, ".");
			if (!in_array("packageinfo.txt", $fileList))
			{
				$message = "Wrong product directory specified. The directory does not contain a file 'packageinfo.txt'.";
				\Installer::getInstance()->writeLog($message, "error");
				throw new \StepFailedException($message);
			}

			ftp_close($ftpResource);
		}
	}
}

namespace Validators
{
	class LicenseExistAndValid
	{
		public function validate($data)
		{
			$this->curl = curl_init();
			curl_setopt($this->curl, CURLOPT_HEADER, 0);
			curl_setopt($this->curl, CURLOPT_SSL_VERIFYPEER, 0);
			curl_setopt($this->curl, CURLOPT_RETURNTRANSFER, 1);
			curl_setopt($this->curl, CURLOPT_TIMEOUT, 60);
			curl_setopt($this->curl, CURLOPT_FOLLOWLOCATION, 1);
			curl_setopt($this->curl, CURLOPT_COOKIEJAR, tempnam("", "licenseExistAndValid"));
			if (isset($_SERVER['PHP_AUTH_USER'], $_SERVER['PHP_AUTH_PW']))
			{
				curl_setopt($this->curl, CURLOPT_HTTPAUTH, CURLAUTH_ANY);
				curl_setopt($this->curl, CURLOPT_USERPWD, "{$_SERVER['PHP_AUTH_USER']}:{$_SERVER['PHP_AUTH_PW']}");
			}

			$adminPanelUrl = \Installer::getInstance()->getBaseUrl() . "/admin/";

			$result = $this->request($adminPanelUrl);
			if ($result == 403) 
			{
				throw new \StepFailedException("License validation failed.");
			}
		}
		
		public function request($url, $requestVars = array(), $method = 'GET')
		{
			$queryString = http_build_query($requestVars, '', '&');

			switch ($method)
			{
				case 'GET' :
					curl_setopt($this->curl, CURLOPT_HTTPGET, true);
					$url .= (strpos($url, '?')) ? '&' : '?';
					$url .= $queryString;
				break;
				case 'POST' :
					curl_setopt($this->curl, CURLOPT_POST, true);
					curl_setopt($this->curl, CURLOPT_POSTFIELDS, $queryString);
				break;
				default :
					throw new \Exception('Unkown method: '. $method);
			}

			curl_setopt($this->curl, CURLOPT_URL, $url);
			curl_exec($this->curl);

			$status = curl_getinfo($this->curl, CURLINFO_HTTP_CODE);
			
			return $status;
		}
	}
}

namespace Validators {
	class LicenseVerificationCode
	{
		public function validate($data)
		{
			extract($data);

			if (empty($code)) throw new \StepFailedException("Verification Code is not specified.");

			$post_string = http_build_query(array(
				'action' => 'verificationCodeValid',
				'site_url' => \Installer::getInstance()->getBaseUrl(),
				'code' => $code,
			));
			$parts = parse_url(\Installer::getInstance()->getConfig('licenseWorksforweb') . 'system/licenses/installation_license/');

			@$fp = fsockopen($parts['host'],
				isset($parts['port']) ? $parts['port'] : 80,
				$errNo, $errStr, 30);

			if (false === $fp) throw new \StepFailedException("Can not connect to remote server", "error");

			$out = "POST " . $parts['path'] . " HTTP/1.1\n";
			$out .= "Host: " . $parts['host'] . "\n";
			$out .= "Content-Type: application/x-www-form-urlencoded\n";
			$out .= "Content-Length: " . strlen($post_string) . "\n";
			$out .= "Connection: Close\n\n";
			if (!empty($post_string)) {
				$out .= $post_string;
			}
			fwrite($fp, $out);

			$isBody = false;
			$message = '';
			while (!feof($fp)) {
				$buf = fgets($fp, 1024);

				if ($isBody) {
					$message .= $buf;
				}

				if ($buf == "\r\n") {
					$isBody = true;
				}
			}
			fclose($fp);
			if (!empty($message)) throw new \StepFailedException($message);
		}
	}
}

namespace Validators
{
	class MFAUrl
	{
		public function validate($data)
		{
			if (empty($data['url'])) throw new \StepFailedException("Mobile FrontEnd Url is not specified.");
			if (filter_var($data['url'], FILTER_VALIDATE_URL) === FALSE) throw new \StepFailedException("Mobile FrontEnd Url is invalid.");
		}
	}
}

namespace Validators
{
	class UserData
	{
		public function validate($data)
		{
			extract($data);

			if (empty($first_name)) throw new \StepFailedException("First Name is not specified.");
			if (empty($last_name)) throw new \StepFailedException("Last Name is not specified.");
			if (empty($email)) throw new \StepFailedException("The email field is empty. Please type in your email address.");
			if (! filter_var($email, FILTER_VALIDATE_EMAIL)) throw new \StepFailedException("Please specify a valid email address.");
			if (empty($terms_agree)) throw new \StepFailedException("You must agree to the terms of the license agreement in order to get a free license.");

		}
	}
}namespace { $FILES = array (
  'files/default_button_set.tpl' => 'PGZvcm0gbWV0aG9kPSJwb3N0Ij4KCTxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InJlc3RvcmUiIHZhbHVlPSIiIC8+Cgk8P3BocCBpZiAoaXNzZXQoJGFjdGlvbk5leHQpKSA6ID8+CgkJPGRpdiBjbGFzcz0icm93Ij4KCQkJPGRpdiBjbGFzcz0iY29sLXhzLW9mZnNldC00IGNvbC14cy00IHRleHQtY2VudGVyIj4KCQkJCTxpbnB1dCB0eXBlPSJzdWJtaXQiIHZhbHVlPSJOZXh0IiBuYW1lPSJhY3Rpb25OZXh0IiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IG5leHQiIC8+CgkJCTwvZGl2PgoJCTwvZGl2PgoJPD9waHAgZW5kaWY7ID8+CjwvZm9ybT4K',
  'files/default_confirmation.tpl' => 'PGgxPjw/cGhwIGVjaG8gJGNhcHRpb247ID8+PC9oMT4KPGRpdiBjbGFzcz0ibWVzc2FnZXMiPgoJPGRpdiBjbGFzcz0ibWVzc2FnZSI+CgkJPD9waHAgZWNobyAkbWVzc2FnZTsgPz4KCTwvZGl2PgoJCgk8P3BocCBpZiAoIWVtcHR5KCRmYWlsZWREaXJzKSkgOiA/PgoJPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtZGFuZ2VyIiByb2xlPSJhbGVydCI+CgkJPHVsPgoJCQk8P3BocCBmb3JlYWNoKCRmYWlsZWREaXJzIGFzICRmYWlsZWREaXIpOiA/PgoJCQkJPGxpPi88P3BocCBlY2hvICRmYWlsZWREaXI7ID8+PC9saT4KCQkJPD9waHAgZW5kZm9yZWFjaDsgPz4KCQk8L3VsPgoJPC9kaXY+Cgk8P3BocCBlbmRpZjsgPz4KCgk8P3BocCBpZiAoIWVtcHR5KCRmYWlsZWRGaWxlcykpIDogPz4KCTxkaXYgY2xhc3M9ImFsZXJ0IGFsZXJ0LWRhbmdlciIgcm9sZT0iYWxlcnQiPgoJCTx1bD4KCQkJPD9waHAgZm9yZWFjaCgkZmFpbGVkRmlsZXMgYXMgJGZhaWxlZEZpbGUpOiA/PgoJCQkJPGxpPi88P3BocCBlY2hvICRmYWlsZWRGaWxlOyA/PjwvbGk+CgkJCTw/cGhwIGVuZGZvcmVhY2g7ID8+CgkJPC91bD4KCTwvZGl2PgoJPD9waHAgZW5kaWY7ID8+CjwvZGl2PgoKPGZvcm0gbWV0aG9kPSJwb3N0Ij4KCTxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InJlc3RvcmUiIHZhbHVlPSIiIC8+CgoJPGRpdiBjbGFzcz0icm93Ij4KCQk8ZGl2IGNsYXNzPSJjb2wteHMtb2Zmc2V0LTQgY29sLXhzLTQgdGV4dC1jZW50ZXIiPgoJCQk8aW5wdXQgdHlwZT0ic3VibWl0IiB2YWx1ZT0iUmV0cnkiIG5hbWU9ImFjdGlvblJldHJ5IiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IHJldHJ5IiAvPgoJCTwvZGl2PgoKCQk8P3BocCBpZiAoJHNraXBhYmxlKSA6ID8+CgkJCTxkaXYgY2xhc3M9ImNvbC14cy00IHRleHQtcmlnaHQiPgoJCQkJPGlucHV0IHR5cGU9InN1Ym1pdCIgdmFsdWU9IlNraXAiIGNsYXNzPSJidG4gYnRuLWxpbmsgc2tpcCIgbmFtZT0iYWN0aW9uTmV4dCIgLz4KCQkJPC9kaXY+CgkJPD9waHAgZW5kaWY7ID8+Cgk8L2Rpdj4KPC9mb3JtPgo=',
  'files/default_form.tpl' => 'PGgxPjw/cGhwIGVjaG8gJGNhcHRpb247ID8+PC9oMT4KCjw/cGhwIGZvcmVhY2ggKCRtZXNzYWdlcyBhcyAkbWVzc2FnZSkgeyA/PgoJPD9waHAgaWYgKCRtZXNzYWdlWyd0eXBlJ10gPT0gJ2Vycm9yJykgJG1lc3NhZ2VbJ3R5cGUnXSA9ICdkYW5nZXInIDs/PgoKCTxkaXYgY2xhc3M9ImFsZXJ0IGFsZXJ0LTw/cGhwIGVjaG8gJG1lc3NhZ2VbJ3R5cGUnXTsgPz4iIHJvbGU9ImFsZXJ0Ij4KCQk8P3BocCBlY2hvICRtZXNzYWdlWydtZXNzYWdlJ107ID8+Cgk8L2Rpdj4KPD9waHAgfTsgPz4KCjxmb3JtIG1ldGhvZD0icG9zdCI+Cgk8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJyZXN0b3JlIiB2YWx1ZT0iIiAvPgoKCTw/cGhwIGZvcmVhY2ggKCRmaWVsZHMgYXMgJG5hbWUgPT4gJGZpZWxkKSB7ID8+CgkJPD9waHAgaWYgKCRmaWVsZFsndHlwZSddID09ICJyYWRpbyIpIHsgPz4KCQkJPD9waHAgZm9yZWFjaCAoJGZpZWxkWyd2YWx1ZXMnXSBhcyAkdmFsdWUgPT4gJHZhbHVlRGF0YSkgeyA/PgoJCQkJPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CgkJCQkJPGRpdiBjbGFzcz0iY29sLXNtLW9mZnNldC0yIGNvbC1zbS0xMCI+CgkJCQkJCTxkaXYgY2xhc3M9InJhZGlvIj4KCQkJCQkJICA8bGFiZWw+CgkJCQkJCQkgIDxpbnB1dCB0eXBlPSJyYWRpbyIgbmFtZT0iPD9waHAgZWNobyAkbmFtZTsgPz4iIHZhbHVlPSI8P3BocCBlY2hvICR2YWx1ZTsgPz4iIDw/cGhwIGlmICgkZmllbGRbJ2RlZmF1bHQnXSA9PSAkdmFsdWUpIGVjaG8gJ2NoZWNrZWQ9ImNoZWNrZWQiJzsgPz4gLz4KCQkJCQkJCSAgPD9waHAgZWNobyAkdmFsdWVEYXRhWydjYXB0aW9uJ107ID8+CgkJCQkJCSAgPC9sYWJlbD4KCQkJCQkJPC9kaXY+CgkJCQkJPC9kaXY+CgkJCQk8L2Rpdj4KCQkJPD9waHAgfSA/PgoJCTw/cGhwIH0gZWxzZSB7ID8+CgkJCTxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgoJCQkJPGxhYmVsIGZvcj0iPD9waHAgZWNobyAkbmFtZTsgPz4iPjw/cGhwIGVjaG8gJGZpZWxkWydjYXB0aW9uJ107ID8+OjwvbGFiZWw+CgoJCQkJCTxpbnB1dCB0eXBlPSI8P3BocCBlY2hvICRmaWVsZFsndHlwZSddOyA/PiIgY2xhc3M9ImZvcm0tY29udHJvbCIgbmFtZT0iPD9waHAgZWNobyAkbmFtZTsgPz4iIGlkPSI8P3BocCBlY2hvICRuYW1lOyA/PiIgdmFsdWU9Ijw/cGhwIGVjaG8gJGZpZWxkWyd2YWx1ZSddOyA/PiIvPgoKCQkJPC9kaXY+CgkJPD9waHAgfSA/PgoJPD9waHAgfTsgPz4KCgk8ZGl2IGNsYXNzPSJyb3ciPgoJCTxkaXYgY2xhc3M9ImNvbC14cy1vZmZzZXQtNCBjb2wteHMtNCB0ZXh0LWNlbnRlciI+CgkJCTxpbnB1dCB0eXBlPSJzdWJtaXQiIHZhbHVlPSJOZXh0IiBuYW1lPSJhY3Rpb24iIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgbmV4dCIgLz4KCQk8L2Rpdj4KCgkJPD9waHAgaWYgKCRza2lwYWJsZSkgeyA/PgoJCQk8ZGl2IGNsYXNzPSJjb2wteHMtNCB0ZXh0LXJpZ2h0Ij4KCQkJCTxpbnB1dCB0eXBlPSJzdWJtaXQiIHZhbHVlPSJTa2lwIiBuYW1lPSJhY3Rpb24iIGNsYXNzPSJidG4gYnRuLWxpbmsgc2tpcCIgLz4KCQkJPC9kaXY+CgkJPD9waHAgfSA/PgoJPC9kaXY+CjwvZm9ybT4K',
  'files/default_index.tpl' => 'PGh0bWwgbGFuZz0iZW4iPgo8aGVhZD4KCTxtZXRhIGNoYXJzZXQ9InV0Zi04Ij4KCTxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9ZWRnZSI+Cgk8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPgoJPCEtLSBUaGUgYWJvdmUgMyBtZXRhIHRhZ3MgKm11c3QqIGNvbWUgZmlyc3QgaW4gdGhlIGhlYWQ7IGFueSBvdGhlciBoZWFkIGNvbnRlbnQgbXVzdCBjb21lICphZnRlciogdGhlc2UgdGFncyAtLT4KCTx0aXRsZT5Xb3Jrc0ZvcldlYiBQcm9kdWN0IEluc3RhbGxlcjwvdGl0bGU+CgoJPCEtLSBCb290c3RyYXAgLS0+Cgk8bGluayBocmVmPSJodHRwczovL21heGNkbi5ib290c3RyYXBjZG4uY29tL2Jvb3RzdHJhcC8zLjMuNC9jc3MvYm9vdHN0cmFwLm1pbi5jc3MiIHJlbD0ic3R5bGVzaGVldCI+Cgk8bGluayBocmVmPSI/YWN0aW9uPWZpbGUmZmlsZT1maWxlcy9kZXNpZ24uY3NzIiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIj4KCjwvaGVhZD4KPGJvZHkgb25sb2FkPSJkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbG9nJykuc2Nyb2xsVG9wID0gOTk5OTk5Ij4KCjxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+Cgk8ZGl2IGNsYXNzPSJyb3cgaGVhZGVyIj4KCQk8ZGl2IGNsYXNzPSJjb2wtc20tNCBsb2dvIj4KCQkJPGltZyBzcmM9Ij9hY3Rpb249ZmlsZSZmaWxlPWZpbGVzL2xvZ28ucG5nIj4mbmJzcDsKCQk8L2Rpdj4KCQk8ZGl2IGNsYXNzPSJjb2wtc20tOCBpbnN0YWxsYXRpb24tcHJvZ3Jlc3MiPgoJCQk8ZGl2IGNsYXNzPSJyb3ciPgoJCQkJPGRpdiBjbGFzcz0iY29sLXNtLTgiPgoJCQkJCTxzcGFuIGNsYXNzPSJwcm9kdWN0Ij4KCQkJCQkJPD9waHAgZWNobyAkcHJvZHVjdF9uYW1lOz8+CgkJCQkJCTw/cGhwIGVjaG8gJHByb2R1Y3RfdmVyc2lvbjs/PgoJCQkJCTwvc3Bhbj4KCQkJCQlJbnN0YWxsYXRpb24gUHJvZ3Jlc3MKCQkJCTwvZGl2PgoJCQkJPGRpdiBjbGFzcz0iY29sLXNtLTQgdGV4dC1yaWdodCI+CgkJCQkJPHNwYW4gY2xhc3M9ImN1cnJlbnQtc3RlcCI+CgkJCQkJCTw/cGhwIGVjaG8gJENVUlJFTlRfU1RFUDsgPz4gLyA8P3BocCBlY2hvICRBbGxfU1RFUFM7ID8+CgkJCQkJPC9zcGFuPgoJCQkJPC9kaXY+CgkJCTwvZGl2PgoJCTwvZGl2PgoJPC9kaXY+Cgk8ZGl2IGNsYXNzPSJyb3cgbWFpbiI+CgkJPGRpdiBjbGFzcz0iY29sLXNtLTQgc3RlcHMiPgoJCQk8b2w+CgkJCQk8P3BocCBmb3JlYWNoICgkQUNUSU9OUyBhcyAkYWN0aW9uID0+ICRzdGF0dXMpIHsgPz4KCQkJCTxsaSBjbGFzcz0iPD9waHAgZWNobyAkc3RhdHVzOyA/PiI+CgoJCQkJCTxkaXYgY2xhc3M9InB1bGwtcmlnaHQiPgoJCQkJCQk8P3BocCBpZiAoJHN0YXR1cyA9PSAnc2tpcHBlZCcpOiA/PgoJCQkJCQk8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi13YXJuaW5nLXNpZ24iIGFyaWEtaGlkZGVuPSJ0cnVlIiBzdHlsZT0iY29sb3I6ICM4YTZkM2IiPjwvc3Bhbj4KCQkJCQkJPD9waHAgZWxzZWlmICgkc3RhdHVzID09ICdjb21wbGV0ZWQnKTogPz4KCQkJCQkJPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tb2siIGFyaWEtaGlkZGVuPSJ0cnVlIiBzdHlsZT0iY29sb3I6ICMzYzc2M2QiPjwvc3Bhbj4KCQkJCQkJPD9waHAgZW5kaWYgPz4KCgkJCQkJPC9kaXY+CgoJCQkJCTw/cGhwIGVjaG8gJGFjdGlvbjsgPz4KCQkJCTwvbGk+CgkJCQk8P3BocCB9OyA/PgoJCQk8L29sPgoJCTwvZGl2PgoJCTxkaXYgY2xhc3M9ImNvbC1zbS04IGNvbnRlbnQiPgoJCQk8P3BocCBlY2hvICRNQUlOX0NPTlRFTlQ7Pz4KCQk8L2Rpdj4KCTwvZGl2PgoJPGRpdiBjbGFzcz0icm93IGxvZyI+CgkJPGRpdiBjbGFzcz0iY29sLXNtLTEyIHdpbmRvdyBwcmUtc2Nyb2xsYWJsZSIgaWQ9ImxvZyI+CgkJCTw/cGhwIGVjaG8gJExPRzs/PgoJCTwvZGl2PgoJPC9kaXY+CjwvZGl2PgoKPGRpdiBjbGFzcz0iZmFkZXIiPjxpbWcgc3JjPSI/YWN0aW9uPWZpbGUmZmlsZT1maWxlcy9zcGlubmVyLmdpZiIvPjwvZGl2PgoKPCEtLSBqUXVlcnkgKG5lY2Vzc2FyeSBmb3IgQm9vdHN0cmFwJ3MgSmF2YVNjcmlwdCBwbHVnaW5zKSAtLT4KPHNjcmlwdCBzcmM9Imh0dHBzOi8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L2xpYnMvanF1ZXJ5LzEuMTEuMi9qcXVlcnkubWluLmpzIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgoJJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkgewoJCSQoImZvcm0iKS5zdWJtaXQoZnVuY3Rpb24gKCkgewoJCQkkKCJkaXYuZmFkZXIiKS5mYWRlSW4oNTAwLCBmdW5jdGlvbiAoKXskKHRoaXMpLmNzcygnZmlsdGVyJywgJ2FscGhhKG9wYWNpdHkgPSA4MCknKTt9KTsKCQl9KTsKCX0pOwo8L3NjcmlwdD4KPC9ib2R5Pgo8L2h0bWw+',
  'files/default_messages.tpl' => 'PGgxPjw/cGhwIGVjaG8gJGNhcHRpb247ID8+PC9oMT4KPGRpdiBjbGFzcz0ibWVzc2FnZXMiPgoJPD9waHAgZm9yZWFjaCAoJG1lc3NhZ2VzIGFzICRtZXNzYWdlKSB7ID8+Cgk8ZGl2IGNsYXNzPSI8P3BocCBlY2hvICRtZXNzYWdlWyd0eXBlJ107ID8+Ij48P3BocCBlY2hvICRtZXNzYWdlWydtZXNzYWdlJ107ID8+PC9kaXY+Cgk8P3BocCB9OyA/Pgo8L2Rpdj4K',
  'files/design.css' => 'LmhlYWRlciA+IGRpdiB7CgloZWlnaHQ6IDgwcHg7CglsaW5lLWhlaWdodDogODBweDsKfQoKLmhlYWRlciA+IGRpdiBpbWcgewoJdmVydGljYWwtYWxpZ246IG1pZGRsZTsKfQoKLmxvZ28gewoJYmFja2dyb3VuZC1jb2xvcjogIzQ5NTE1OTsKCXBhZGRpbmctbGVmdDogNTBweDsKfQoKLnN0ZXBzIHsKCWJhY2tncm91bmQtY29sb3I6ICMzNTNBM0Y7CglwYWRkaW5nOiAyMHB4IDIwcHggMjBweCA1MHB4Owp9CgouaW5zdGFsbGF0aW9uLXByb2dyZXNzLAouY29udGVudCB7CglwYWRkaW5nLWxlZnQ6IDQwcHg7CglwYWRkaW5nLXJpZ2h0OiA1MHB4Owp9CgouY29udGVudCBoMSB7CgltYXJnaW4tdG9wOiAwOwp9CgoubWFpbiA+IGRpdiB7CglwYWRkaW5nLXRvcDogNTBweDsKfQoKLmxvZyB7CglwYWRkaW5nOiAyMHB4IDUwcHg7Cglmb250LWZhbWlseTogbW9ub3NwYWNlOwoJYmFja2dyb3VuZC1jb2xvcjogI2YzZjNmMzsKfQoKLmxvZyAud2luZG93IHsKCWJvcmRlcjogMXB4IHNvbGlkICNlNmU2ZTY7CgliYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmOwp9Cgouc3RlcHMgb2wgewoJY291bnRlci1yZXNldDogaXRlbTsKCXBhZGRpbmc6IDA7Cn0KCi5zdGVwcyBsaSB7CglkaXNwbGF5OiBibG9jazsKCXBhZGRpbmc6IDVweCAwOwp9Cgouc3RlcHMgbGk6YmVmb3JlIHsKCWNvbnRlbnQ6IGNvdW50ZXIoaXRlbSkgIi4gIjsKCWNvdW50ZXItaW5jcmVtZW50OiBpdGVtOwoJd2lkdGg6IDJlbTsKCWRpc3BsYXk6IGlubGluZS1ibG9jazsKfQoKLnN0ZXBzIC5pbmNvbXBsZXRlIHsKCWNvbG9yOiAjZmZmZmZmOwp9Cgouc3RlcHMgLmNvbXBsZXRlZCB7Cgljb2xvcjogIzgwOEM5ODsKfQoKLnN0ZXBzIC5za2lwcGVkIHsKCWNvbG9yOiAjODA4Qzk4Owp9Cgouc3RlcHMgLmN1cnJlbnQgewoJY29sb3I6ICNmZmE2Mzk7Cglmb250LXdlaWdodDogYm9sZDsKfQoKLmluc3RhbGxhdGlvbi1wcm9ncmVzcyB7CgliYWNrZ3JvdW5kLWNvbG9yOiAjZWRlZGVkOwoJZm9udC1zaXplOiAyN3B4OwoJYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICM3NjdjODI7Cn0KCi5pbnN0YWxsYXRpb24tcHJvZ3Jlc3MgLnByb2R1Y3QgewoJY29sb3I6ICMzMzdhYjc7Cn0KCi5pbnN0YWxsYXRpb24tcHJvZ3Jlc3MgLmN1cnJlbnQtc3RlcCB7Cgljb2xvcjogIzMzN2FiNzsKfQoKLnJlcXVpcmVtZW50cyAuaXRlbSB7CgltYXJnaW46IDEwcHggMDsKCXBhZGRpbmc6IDEwcHggMjBweDsKCWJvcmRlci1yYWRpdXM6IDVweDsKfQoKLnJlcXVpcmVtZW50cyAuaXRlbS5zdWNjZXNzIHsKCWJhY2tncm91bmQtY29sb3I6IHJnYmEoMTQwLCAxOTgsIDYzLCAwLjE1KTsKfQoKLnJlcXVpcmVtZW50cyAuaXRlbS5lcnJvciB7CgliYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjksIDM3LCAwLjEpOwp9CgoucmVxdWlyZW1lbnRzIC5pdGVtLndhcm5pbmcgewoJYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDE2NSwgNTYsIDAuMTUpOwp9CgoucmVxdWlyZW1lbnRzIC5pdGVtIHsKCWZvbnQtZmFtaWx5OiAnT3BlbiBTYW5zJywgc2Fucy1zZXJpZjsKCWZvbnQtc2l6ZTogMTZweDsKCWNvbG9yOiAjNGI1MjU5ICFpbXBvcnRhbnQ7Cn0KCi5yZXF1aXJlbWVudHMgLml0ZW0gLmhlYWRpbmcgewoJZm9udC13ZWlnaHQ6IGJvbGQ7Cn0KCi5yZXF1aXJlbWVudHMgLml0ZW0gLm1lc3NhZ2UgewoJbWFyZ2luLXRvcDogMTBweDsKfQoKLmxvZyAuc3VjY2VzcyB7Cgp9CgpkaXYuZmFkZXIgewoJZGlzcGxheTogbm9uZTsKCXBvc2l0aW9uOiBmaXhlZDsKCWxlZnQ6IDA7Cgl0b3A6IDA7Cgl3aWR0aDogMTAwJTsKCWhlaWdodDogMTAwJTsKCWJhY2tncm91bmQ6ICMzMzM7CglvcGFjaXR5OiAwLjg7CglmaWx0ZXI6IGFscGhhKG9wYWNpdHk9ODApOwoJdGV4dC1hbGlnbjogY2VudGVyOwoJei1pbmRleDogMTsKfQoKKiBodG1sIGRpdi5mYWRlciB7Cglwb3NpdGlvbjogYWJzb2x1dGU7Cn0KCmRpdi5mYWRlciBpbWcgewoJcG9zaXRpb246IGFic29sdXRlOwoJdG9wOiA0NSU7Cn0KCiogaHRtbCBkaXYuZmFkZXIgaW1nIHsKCXRvcDogMzUlOwp9CgouYnRuIHsKCXRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7Cglmb250LXdlaWdodDogYm9sZDsKfQoKLmJ0bi5za2lwIHsKCWNvbG9yOiAjZmZhNjM5Owp9Cgpmb3JtIGxhYmVsIHsKCWNvbG9yOiAjODE4ZDk5OwoJdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTsKCWZvbnQtc2l6ZTogMTJweDsKfQo=',
  'files/file_upload_form.tpl' => 'PGgxPjw/cGhwIGVjaG8gJGNhcHRpb247ID8+PC9oMT4KPGRpdiBjbGFzcz0ibWVzc2FnZXMiPgoJPD9waHAgZm9yZWFjaCAoJG1lc3NhZ2VzIGFzICRtZXNzYWdlKSB7ID8+Cgk8ZGl2IGNsYXNzPSI8P3BocCBlY2hvICRtZXNzYWdlWyd0eXBlJ107ID8+Ij48P3BocCBlY2hvICRtZXNzYWdlWydtZXNzYWdlJ107ID8+PC9kaXY+Cgk8P3BocCB9OyA/Pgo8L2Rpdj4KPGRpdiBjbGFzcz0iaW5wdXRGb3JtIj4KCTxmb3JtIG5hbWU9IiIgbWV0aG9kPSJwb3N0IiBlbmN0eXBlPSJtdWx0aXBhcnQvZm9ybS1kYXRhIj4KCQk8P3BocCBmb3JlYWNoICgkZmllbGRzIGFzICRuYW1lID0+ICRmaWVsZCkgewoJCQlpZiAoJGZpZWxkWyd0eXBlJ10gPT0gInJhZGlvIikgeyA/PgoJCQkJPD9waHAgZm9yZWFjaCAoJGZpZWxkWyd2YWx1ZXMnXSBhcyAkdmFsdWUgPT4gJHZhbHVlRGF0YSkgeyA/PgoJCQkJPGRpdiBjbGFzcz0iZm9ybUZpZWxkIiBzdHlsZT0idGV4dC1hbGlnbjogbGVmdDsiPgoJCQkJCTxpbnB1dCB0eXBlPSJyYWRpbyIgbmFtZT0iPD9waHAgZWNobyAkbmFtZTsgPz4iIHZhbHVlPSI8P3BocCBlY2hvICR2YWx1ZTsgPz4iIDw/cGhwIGlmICgkZmllbGRbJ2RlZmF1bHQnXSA9PSAkdmFsdWUpIGVjaG8gJ2NoZWNrZWQ9ImNoZWNrZWQiJzsgPz4gLz4KCQkJCQk8P3BocCBlY2hvICR2YWx1ZURhdGFbJ2NhcHRpb24nXTsgPz4KCQkJCTwvZGl2PgoJCQkJPD9waHAgfSA/PgoJCQk8P3BocCB9IGVsc2UgeyA/PgoJCQkJPGRpdiBjbGFzcz0iZm9ybUZpZWxkIj4KCQkJCQk8bGFiZWwgZm9yPSI8P3BocCBlY2hvICRuYW1lOyA/PiI+PD9waHAgZWNobyAkZmllbGRbJ2NhcHRpb24nXTsgPz46PC9sYWJlbD4KCQkJCQk8aW5wdXQgdHlwZT0iPD9waHAgZWNobyAkZmllbGRbJ3R5cGUnXTsgPz4iIG5hbWU9Ijw/cGhwIGVjaG8gJG5hbWU7ID8+IiBpZD0iPD9waHAgZWNobyAkbmFtZTsgPz4iIHZhbHVlPSI8P3BocCBlY2hvICRmaWVsZFsndmFsdWUnXTsgPz4iLz4KCQkJCTwvZGl2PgoJCQk8P3BocCB9ID8+CgkJPD9waHAgfTsgPz4KCQk8ZGl2IGNsYXNzPSJmb3JtQ29udHJvbHMiPgoJCQk8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJyZXN0b3JlIiB2YWx1ZT0iIiAvPgoJCQk8aW5wdXQgdHlwZT0ic3VibWl0IiB2YWx1ZT0iTmV4dCIgbmFtZT0iYWN0aW9uIiAvPgoJCQk8P3BocCBpZiAoJHNraXBhYmxlKSB7ID8+PGlucHV0IHR5cGU9InN1Ym1pdCIgdmFsdWU9IlNraXAiIG5hbWU9ImFjdGlvbiIgLz48P3BocCB9OyA/PgoJCTwvZGl2PgoJPC9mb3JtPgo8L2Rpdj4=',
  'files/get_license_form.tpl' => 'PGgxPjw/cGhwIGVjaG8gJGNhcHRpb247ID8+PC9oMT4NCg0KPD9waHAgZm9yZWFjaCAoJG1lc3NhZ2VzIGFzICRtZXNzYWdlKSA6ICA/Pg0KCTw/cGhwICRhbGVydENzcyA9ICRtZXNzYWdlWyd0eXBlJ10gPT0gJ2Vycm9yJyA/ICdkYW5nZXInIDogJG1lc3NhZ2VbJ3R5cGUnXTsgID8+DQoJPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtPD9waHAgZWNobyAkYWxlcnRDc3M7ID8+IiByb2xlPSJhbGVydCI+PD9waHAgZWNobyAkbWVzc2FnZVsnbWVzc2FnZSddOyA/PjwvZGl2Pg0KPD9waHAgZW5kZm9yZWFjaDsgPz4NCg0KPGRpdiBjbGFzcz0id2VsbCI+DQoJPGZvcm0gbWV0aG9kPSJwb3N0IiBjbGFzcz0iZm9ybS1ob3Jpem9udGFsIj4NCgkJPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0icmVzdG9yZSIgdmFsdWU9IiIgLz4NCg0KCQk8P3BocCBmb3JlYWNoICgkZmllbGRzIGFzICRuYW1lID0+ICRmaWVsZCkgew0KCQkJaWYgKCRmaWVsZFsndHlwZSddID09ICJyYWRpbyIpIHsgPz4NCgkJCQk8P3BocCBmb3JlYWNoICgkZmllbGRbJ3ZhbHVlcyddIGFzICR2YWx1ZSA9PiAkdmFsdWVEYXRhKSB7ID8+DQoJCQkJCTxkaXYgY2xhc3M9ImZvcm1GaWVsZCIgc3R5bGU9InRleHQtYWxpZ246IGxlZnQ7Ij4NCgkJCQkJCTxpbnB1dCB0eXBlPSJyYWRpbyIgbmFtZT0iPD9waHAgZWNobyAkbmFtZTsgPz4iIHZhbHVlPSI8P3BocCBlY2hvICR2YWx1ZTsgPz4iIDw/cGhwIGlmICgkZmllbGRbJ2RlZmF1bHQnXSA9PSAkdmFsdWUpIGVjaG8gJ2NoZWNrZWQ9ImNoZWNrZWQiJzsgPz4gLz4NCgkJCQkJCTw/cGhwIGVjaG8gJHZhbHVlRGF0YVsnY2FwdGlvbiddOyA/Pg0KCQkJCQk8L2Rpdj4NCgkJCQk8P3BocCB9ID8+DQoJCQk8P3BocCB9IGVsc2VpZigkZmllbGRbJ3R5cGUnXSAhPSAiY2hlY2tib3giKSB7ID8+DQoJCQkJPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+DQoJCQkJCTxsYWJlbCBmb3I9Ijw/cGhwIGVjaG8gJG5hbWU7ID8+IiBjbGFzcz0iY29sLXNtLTIgY29udHJvbC1sYWJlbCI+DQoJCQkJCQk8P3BocCBlY2hvICRmaWVsZFsnY2FwdGlvbiddOyA/Pg0KCQkJCQk8L2xhYmVsPg0KCQkJCQk8ZGl2IGNsYXNzPSJjb2wtc20tMTAiPg0KCQkJCQkJPGlucHV0IHR5cGU9Ijw/cGhwIGVjaG8gJGZpZWxkWyd0eXBlJ107ID8+IiBuYW1lPSI8P3BocCBlY2hvICRuYW1lOyA/PiIgaWQ9Ijw/cGhwIGVjaG8gJG5hbWU7ID8+IiB2YWx1ZT0iPD9waHAgZWNobyAkZmllbGRbJ3ZhbHVlJ107ID8+IiBjbGFzcz0iZm9ybS1jb250cm9sIi8+DQoJCQkJCTwvZGl2Pg0KCQkJCTwvZGl2Pg0KCQkJPD9waHAgfSA/Pg0KCQk8P3BocCB9OyA/Pg0KDQoNCgkJPD9waHAgZm9yZWFjaCAoJGZpZWxkcyBhcyAkbmFtZSA9PiAkZmllbGQpIHsNCgkJCWlmICgkZmllbGRbJ3R5cGUnXSA9PSAiY2hlY2tib3giKSB7ID8+DQoJCQkJPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+DQoJCQkJCTxkaXYgY2xhc3M9ImNvbC1zbS1vZmZzZXQtMiBjb2wtc20tMTAiPg0KCQkJCQkJPGRpdiBjbGFzcz0iY2hlY2tib3giPg0KCQkJCQkJCTxsYWJlbD4NCgkJCQkJCQkJPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iPD9waHAgZWNobyAkbmFtZTsgPz4iIHZhbHVlPSIwIj4NCgkJCQkJCQkJPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSI8P3BocCBlY2hvICRuYW1lOyA/PiIgdmFsdWU9IjEiPiA8P3BocCBlY2hvICRmaWVsZFsnY2FwdGlvbiddOyA/Pg0KCQkJCQkJCQk8P3BocCBpZiAoJG5hbWUgPT0gJ3Rlcm1zX2FncmVlJykgeyA/Pg0KCQkJCQkJCQkJPGEgaHJlZj0iaHR0cDovL3d3dy53b3Jrc2ZvcndlYi5jb20vc3VwcG9ydC9ldWxhLyIgdGFyZ2V0PSJfYmxhbmsiPkxpY2Vuc2UgQWdyZWVtZW50PC9hPi4NCgkJCQkJCQkJPD9waHAgfSA/Pg0KCQkJCQkJCTwvbGFiZWw+DQoJCQkJCQk8L2Rpdj4NCgkJCQkJPC9kaXY+DQoJCQkJPC9kaXY+DQoJCQk8P3BocCB9ID8+DQoJCTw/cGhwIH07ID8+DQoNCgkJPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+DQoJCQk8ZGl2IGNsYXNzPSJjb2wtc20tb2Zmc2V0LTIgY29sLXNtLTEwIj4NCgkJCQk8aW5wdXQgdHlwZT0ic3VibWl0IiB2YWx1ZT0iTmV4dCIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgbmFtZT0iYWN0aW9uIiAvPg0KCQkJCTw/cGhwIGlmICgkc2tpcGFibGUpIHsgPz48aW5wdXQgdHlwZT0ic3VibWl0IiB2YWx1ZT0iU2tpcCIgbmFtZT0iYWN0aW9uIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiAvPjw/cGhwIH07ID8+DQoJCQk8L2Rpdj4NCgkJPC9kaXY+DQoJPC9mb3JtPg0KPC9kaXY+DQo=',
  'files/jquery.js' => '',
  'files/logo.png' => 'iVBORw0KGgoAAAANSUhEUgAAAIwAAAAaCAMAAABSIURSAAAAclBMVEUAAAD////////////////////////////////////////////bKCf3k0XbKCfbKCfbKCf////////bKCf3k0X3k0X3k0XbKCfbKCfbKCf3k0X3k0X3k0X3k0X3k0XbKCfbKCf3k0X3k0X////bKCf3k0Ur2CGkAAAAI3RSTlMA+nbttj/Wo+OO9Vzh+cWi+schHx/cxjxw76+chzzph1dwV6HptJ4AAAJwSURBVEjHzZVtk6IwEIQnQJRFRVHXd0/vJvz/v3jpZOIYrrbK3Q9yT62pXpwMTdIRou1n3/eLC3lUg8Pcufme3sl20QfOA003F7jTG/nshWuuyUWO9Eb6xCnXSyfQ+1ADuyf9SbT6b8zs6O7GMLPohUum506Y0yswV5RjDXNBL2F4IurUC5neuMThh2ZK5nL2XTPXx860+22KjMZ3RS9g1Ux+h2GZ8kXprz7wh1btQ2t8lzqjxlAS1Rg+DLOZEU3ZTJmDmYJ907VfEW6s1x4t8//7v2EPX1LG1iUmeXnpwYJubvXQB5fYkFCzwW4whs57CBQiYCZ4ocb39was725KLSuiyHpU6YrhyCPCZ0T2plpoScBjWDzKzPqPb1YjFga3MzY0xyUJD26PtdeyAjPzHmuUWgwwjwrs9A4GtojsXPTeJfbPGZ123HBVxd42+FtP45lhsKawMk03kyBoGW416IHdDfsVEyDjVSO7ibqFHr4LSuzslMuaJ9IIQYBKZhBD20A10YyW4TPoMXnsnOEqfFdKhH/HyC6jdhpfxT+Nn+gH/shWRsw0NTYCFF5V/65MMejR+SowzVaGzo/IrqC/ONc2ZL+JQcMypMzI7wwMoahA3y6Y0TKYyXuI064MmVnHzID+lCJ7gD7m8U0YlE/QjfSYqBnIKp2mGcxomZjJe5Ry8HBRMgd2iC9AhAfxVSZyIDo5XGwKejZDBrpGZIqQGS1LZvIeFdZphlI/CV8IS/1dyV5L32VNP8Ra1UeNbPZaGgWXaLP4joKaOVKrizQG+cq0Gp+RaPUAHTS+I7FZ6dbMk63R2LSI7I0A5PFO7+cvX/qJhTbo2vgAAAAASUVORK5CYII=',
  'files/requirements.tpl' => 'PGgxPlN5c3RlbSBSZXF1aXJlbWVudHM8L2gxPgoKPD9waHAKIGZvcmVhY2ggKCRyZXN1bHQgYXMgJGNhcHRpb24gPT4gJGluZm8pIHsKCWlmICgkaW5mb1snc3RhdHVzJ10gPT0gJ3N1Y2Nlc3MnKSB7CgkJcHJpbnRmKCc8ZGl2IGNsYXNzPSJhbGVydCBhbGVydC1zdWNjZXNzIj48ZGl2IGNsYXNzPSJwdWxsLXJpZ2h0Ij48c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1vayIgYXJpYS1oaWRkZW49InRydWUiPjwvc3Bhbj48L2Rpdj48c3Ryb25nPiVzPC9zdHJvbmc+PC9kaXY+JywgJGNhcHRpb24pOwoJfSBlbHNlIHsKCQlpZiAoJGluZm9bJ3N0YXR1cyddID09ICdlcnJvcicpIHsKCQkJJGFsZXJ0Q2xhc3MgPSAnZGFuZ2VyJzsKCQkJJGljb24gPSAncmVtb3ZlJzsKCQl9IGVsc2UgewoJCQkkYWxlcnRDbGFzcyA9ICRpbmZvWydzdGF0dXMnXTsKCQkJJGljb24gPSAnd2FybmluZy1zaWduJzsKCQl9CgoJCXByaW50ZignPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtJXMiPjxkaXYgY2xhc3M9InB1bGwtcmlnaHQiPjxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLSVzIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9zcGFuPjwvZGl2PjxzdHJvbmc+JXM8L3N0cm9uZz48cD4lczwvcD48L2Rpdj4nLCAkYWxlcnRDbGFzcyAsICRpY29uLCAkY2FwdGlvbiwgJGluZm9bJ21lc3NhZ2UnXSk7Cgl9CiB9Cj8+Cg==',
  'files/retry_control.tpl' => 'PGZvcm0gbWV0aG9kPSJwb3N0Ij4KCTxpbnB1dCB0eXBlPSJoaWRkZW4iIHZhbHVlPSIiIG5hbWU9InJlc3RvcmUiPgoKCTxkaXYgY2xhc3M9InJvdyI+CgkJPGRpdiBjbGFzcz0iY29sLXhzLW9mZnNldC00IGNvbC14cy00IHRleHQtY2VudGVyIj4KCQkJPGlucHV0IHR5cGU9InN1Ym1pdCIgbmFtZT0iYWN0aW9uIiB2YWx1ZT0iUmV0cnkiIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiPgoJCTwvZGl2PgoJPC9kaXY+CjwvZm9ybT4K',
  'files/retry_skip_confirmation.tpl' => 'PGgxPjw/cGhwIGVjaG8gJGNhcHRpb247ID8+PC9oMT4NCg0KPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtaW5mbyIgcm9sZT0iYWxlcnQiPg0KCTw/cGhwIGVjaG8gJG1lc3NhZ2U7ID8+DQo8L2Rpdj4NCg0KPGZvcm0gbWV0aG9kPSJwb3N0Ij4NCgk8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJyZXN0b3JlIiB2YWx1ZT0iIi8+DQoNCgk8ZGl2IGNsYXNzPSJyb3ciPg0KCQk8ZGl2IGNsYXNzPSJjb2wteHMtb2Zmc2V0LTQgY29sLXhzLTQgdGV4dC1jZW50ZXIiPg0KCQkJPGlucHV0IHR5cGU9InN1Ym1pdCIgdmFsdWU9IlJldHJ5IiBuYW1lPSJhY3Rpb25SZXRyeSIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSByZXRyeSIvPg0KCQk8L2Rpdj4NCg0KCQk8P3BocCBpZiAoJHNraXBhYmxlKSA6ID8+DQoJCQk8ZGl2IGNsYXNzPSJjb2wteHMtNCB0ZXh0LXJpZ2h0Ij4NCgkJCQk8aW5wdXQgdHlwZT0ic3VibWl0IiB2YWx1ZT0iU2tpcCIgbmFtZT0iYWN0aW9uU2tpcCIgY2xhc3M9ImJ0biBidG4tbGluayBza2lwIi8+DQoJCQk8L2Rpdj4NCgkJPD9waHAgZW5kaWY7ID8+DQoJPC9kaXY+DQo8L2Zvcm0+DQo=',
  'files/spinner.gif' => 'R0lGODlhHwAfAPUAADMzM////0RERFZWVmdnZ3Jycnx8fE5OTmpqaoKCgkdHR1FRUXZ2dn5+fnFxcVpaWjk5OXd3d1RUVEZGRtLS0t/f376+vmFhYaSkpImJibm5uTY2NqqqqsbGxl9fXzc3N8TExNbW1gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH/C05FVFNDQVBFMi4wAwEAAAAh/hpDcmVhdGVkIHdpdGggYWpheGxvYWQuaW5mbwAh+QQJCgAAACwAAAAAHwAfAAAG/0CAcEgUDAgFA4BiwSQexKh0eEAkrldAZbvlOD5TqYKALWu5XIwnPFwwymY0GsRgAxrwuJwbCi8aAHlYZ3sVdwtRCm8JgVgODwoQAAIXGRpojQwKRGSDCRESYRsGHYZlBFR5AJt2a3kHQlZlERN2QxMRcAiTeaG2QxJ5RnAOv1EOcEdwUMZDD3BIcKzNq3BJcJLUABBwStrNBtjf3GUGBdLfCtadWMzUz6cDxN/IZQMCvdTBcAIAsli0jOHSJeSAqmlhNr0awo7RJ19TJORqdAXVEEVZyjyKtE3Bg3oZE2iK8oeiKkFZGiCaggelSTiA2LhxiZLBSjZjBL2siNBOFQ84LxHA+mYEiRJzBO7ZCQIAIfkECQoAAAAsAAAAAB8AHwAABv9AgHBIFAwIBQPAUCAMBMSodHhAJK5XAPaKOEynCsIWqx0nCIrvcMEwZ90JxkINaMATZXfju9jf82YAIQxRCm14Ww4PChAAEAoPDlsAFRUgHkRiZAkREmoSEXiVlRgfQgeBaXRpo6MOQlZbERN0Qx4drRUcAAJmnrVDBrkVDwNjr8BDGxq5Z2MPyUQZuRgFY6rRABe5FgZjjdm8uRTh2d5b4NkQY0zX5QpjTc/lD2NOx+WSW0++2RJmUGJhmZVsQqgtCE6lqpXGjBchmt50+hQKEAEiht5gUcTIESR9GhlgE9IH0BiTkxrMmWIHDkose9SwcQlHDsOIk9ygiVbl5JgMLuV4HUmypMkTOkEAACH5BAkKAAAALAAAAAAfAB8AAAb/QIBwSBQMCAUDwFAgDATEqHR4QCSuVwD2ijhMpwrCFqsdJwiK73DBMGfdCcZCDWjAE2V347vY3/NmdXNECm14Ww4PChAAEAoPDltlDGlDYmQJERJqEhGHWARUgZVqaWZeAFZbERN0QxOeWwgAAmabrkMSZkZjDrhRkVtHYw+/RA9jSGOkxgpjSWOMxkIQY0rT0wbR2LQV3t4UBcvcF9/eFpdYxdgZ5hUYA73YGxruCbVjt78G7hXFqlhY/fLQwR0HIQdGuUrTz5eQdIc0cfIEwByGD0MKvcGSaFGjR8GyeAPhIUofQGNQSgrB4IsdOCqx7FHDBiYcOQshYjKDxliVDpRjunCjdSTJkiZP6AQBACH5BAkKAAAALAAAAAAfAB8AAAb/QIBwSBQMCAUDwFAgDATEqHR4QCSuVwD2ijhMpwrCFqsdJwiK73DBMGfdCcZCDWjAE2V347vY3/NmdXNECm14Ww4PChAAEAoPDltlDGlDYmQJERJqEhGHWARUgZVqaWZeAFZbERN0QxOeWwgAAmabrkMSZkZjDrhRkVtHYw+/RA9jSGOkxgpjSWOMxkIQY0rT0wbR2I3WBcvczltNxNzIW0693MFYT7bTumNQqlisv7BjswAHo64egFdQAbj0RtOXDQY6VAAUakihN1gSLaJ1IYOGChgXXqEUpQ9ASRlDYhT0xQ4cACJDhqDD5mRKjCAYuArjBmVKDP9+VRljMyMHDwcfuBlBooSCBQwJiqkJAgAh+QQJCgAAACwAAAAAHwAfAAAG/0CAcEgUDAgFA8BQIAwExKh0eEAkrlcA9oo4TKcKwharHScIiu9wwTBn3QnGQg1owBNld+O72N/zZnVzRApteFsODwoQABAKDw5bZQxpQ2JkCRESahIRh1gEVIGVamlmXgBWWxETdEMTnlsIAAJmm65DEmZGYw64UZFbR2MPv0QPY0hjpMYKY0ljjMZCEGNK09MG0diN1gXL3M5bTcTcyFtOvdzBWE+207pjUKpYrL+wY7MAB4EerqZjUAG4lKVCBwMbvnT6dCXUkEIFK0jUkOECFEeQJF2hFKUPAIkgQwIaI+hLiJAoR27Zo4YBCJQgVW4cpMYDBpgVZKL59cEBhw+U+QROQ4bBAoUlTZ7QCQIAIfkECQoAAAAsAAAAAB8AHwAABv9AgHBIFAwIBQPAUCAMBMSodHhAJK5XAPaKOEynCsIWqx0nCIrvcMEwZ90JxkINaMATZXfju9jf82Z1c0QKbXhbDg8KEAAQCg8OW2UMaUNiZAkREmoSEYdYBFSBlWppZl4AVlsRE3RDE55bCAACZpuuQxJmRmMOuFGRW0djD79ED2NIY6TGCmNJY4zGQhBjStPTFBXb21DY1VsGFtzbF9gAzlsFGOQVGefIW2LtGhvYwVgDD+0V17+6Y6BwaNfBwy9YY2YBcMAPnStTY1B9YMdNiyZOngCFGuIBxDZAiRY1eoTvE6UoDEIAGrNSUoNBUuzAaYlljxo2M+HIeXiJpRsRNMaq+JSFCpsRJEqYOPH2JQgAIfkECQoAAAAsAAAAAB8AHwAABv9AgHBIFAwIBQPAUCAMBMSodHhAJK5XAPaKOEynCsIWqx0nCIrvcMEwZ90JxkINaMATZXfjywjlzX9jdXNEHiAVFX8ODwoQABAKDw5bZQxpQh8YiIhaERJqEhF4WwRDDpubAJdqaWZeAByoFR0edEMTolsIAA+yFUq2QxJmAgmyGhvBRJNbA5qoGcpED2MEFrIX0kMKYwUUslDaj2PA4soGY47iEOQFY6vS3FtNYw/m1KQDYw7mzFhPZj5JGzYGipUtESYowzVmF4ADgOCBCZTgFQAxZBJ4AiXqT6ltbUZhWdToUSR/Ii1FWbDnDkUyDQhJsQPn5ZU9atjUhCPHVhgTNy/RSKsiqKFFbUaQKGHiJNyXIAAh+QQJCgAAACwAAAAAHwAfAAAG/0CAcEh8JDAWCsBQIAwExKhU+HFwKlgsIMHlIg7TqQeTLW+7XYIiPGSAymY0mrFgA0LwuLzbCC/6eVlnewkADXVECgxcAGUaGRdQEAoPDmhnDGtDBJcVHQYbYRIRhWgEQwd7AB52AGt7YAAIchETrUITpGgIAAJ7ErdDEnsCA3IOwUSWaAOcaA/JQ0amBXKa0QpyBQZyENFCEHIG39HcaN7f4WhM1uTZaE1y0N/TacZoyN/LXU+/0cNyoMxCUytYLjm8AKSS46rVKzmxADhjlCACMFGkBiU4NUQRxS4OHijwNqnSJS6ZovzRyJAQo0NhGrgs5bIPmwWLCLHsQsfhxBWTe9QkOzCwC8sv5Ho127akyRM7QQAAOwAAAAAAAAAAAA==',
  'files/how_to_get_license_page.tpl' => 'PGgxPk9idGFpbiB0aGUgUHJvZHVjdCBMaWNlbnNlPC9oMT4KPGRpdiBjbGFzcz0iaW5mbyI+Cgk8cD5QbGVhc2UgbWFrZSBzdXJlIHRoYXQgeW91IGhhdmUgYSBsaWNlbnNlIHRvIHVzZSB0aGUgPD9waHAgZWNobyAkcHJvZHVjdF9uYW1lOyA/PiBzY3JpcHQuPC9wPgoJPHA+WW91IGNhbiBlYXNpbHkgZ2VuZXJhdGUgYSAxNS1kYXkgdHJpYWwgbGljZW5zZSBmb3IgeW91ciB3ZWJzaXRlIGF0CgkJPGEgb25jbGljaz0iamF2YXNjcmlwdDp3aW5kb3cub3Blbih0aGlzLmhyZWYsICdfYmxhbmsnKTsgcmV0dXJuIGZhbHNlOyIgaHJlZj0iaHR0cDovL2xpY2Vuc2Uud29ya3Nmb3J3ZWIuY29tLyIgYWx0PSJXb3Jrc0ZvcldlYuKAmXMgTGljZW5zZSBHZW5lcmF0b3Igd2Vic2l0ZSI+V29ya3NGb3JXZWLigJlzIExpY2Vuc2UgR2VuZXJhdG9yIHBhZ2U8L2E+LgoJCVBsZWFzZSByZWFkIGFsbCB0aGUgaW5zdHJ1Y3Rpb25zIG9uIGhvdyB0byBnZW5lcmF0ZSBhIHdvcmtpbmcgbGljZW5zZSBhbmQgY2FyZWZ1bGx5IGZvbGxvdyB0aGVtLgoJPC9wPgoJPHA+VGhlIHBlcm1hbmVudCBsaWNlbnNlIHdpbGwgYmUgc2VudCB0byB5b3UgYnkgZW1haWwgYWZ0ZXIgcHVyY2hhc2luZyBhbiA8P3BocCBlY2hvICRwcm9kdWN0X25hbWU7ID8+IHBhY2thZ2UuPC9wPgo8L2Rpdj4K',
  'files/installation_success.tpl' => 'PGRpdiAgY2xhc3M9ImluZm8iPgoJPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtc3VjY2VzcyIgcm9sZT0iYWxlcnQiPgoJCUNvbmdyYXR1bGF0aW9ucyEhISBUaGUgaW5zdGFsbGF0aW9uIHdhcyBzdWNjZXNzZnVsIQoJPC9kaXY+CgoJPHA+Tm93LCBwbGVhc2UgcmVtb3ZlIHRoZSA8c3Ryb25nPmluc3RhbGwucGhwPC9zdHJvbmc+IGZpbGUgZnJvbSB0aGUgcm9vdCBvZiB0aGUgaW5zdGFsbGF0aW9uIGZvbGRlci48L3A+Cgk8cD5GYWlsdXJlIHRvIGRvIHNvIG1heSBhbGxvdyB0aGlyZCBwYXJ0aWVzIHRvIHJlLWluc3RhbGwgeW91ciBzb2Z0d2FyZSBhbmQgZ2FpbiBjb250cm9sIG92ZXIgaXQuPC9wPgoJPGEgaHJlZj0iPD9waHAgZWNobyAkYmFzZVVybDsgPz5hZG1pbi8iIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiPkdvIHRvIHRoZSBhZG1pbiBwYW5lbDwvYT4mbmJzcDsmbmJzcDsKCTxhIGhyZWY9Ijw/cGhwIGVjaG8gJGJhc2VVcmw7ID8+IiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5Ij4gR28gdG8gdGhlIGZyb250IGVuZCBhcmVhPC9hPgo8L2Rpdj4=',
  'files/show_license.tpl' => 'PGRpdiBjbGFzcz0iaW5mbyI+PD9waHAgZWNobyAkbWVzc2FnZTsgPz48L2Rpdj4=',
  'files/welcome_page.tpl' => 'PGgxPldlbGNvbWUgdG8gPD9waHAgZWNobyAkcHJvZHVjdF9uYW1lOyA/PiBJbnN0YWxsYXRpb24gU2NyaXB0PC9oMT4KPGRpdiBjbGFzcz0iaW5mbyI+Cgk8bm9zY3JpcHQ+CgkJPGRpdiBjbGFzcz0iZXJyb3JNZXNzYWdlQmxvY2siPkphdmFTY3JpcHQgaXMgZGlzYWJsZWQgaW4geW91ciBpbnRlcm5ldCBicm93c2VyLiBQbGVhc2UgZW5hYmxlIEphdmFTY3JpcHQgaW4gb3JkZXIgdG8gdXNlIHRoZSBlc3NlbnRpYWwgZmVhdHVyZXMgb2YgdGhpcyB3ZWJzaXRlLCBvdGhlcndpc2UgaXQgd2lsbCBiZSB1bmFibGUgdG8gd29yayBwcm9wZXJseS48L2Rpdj4KCTwvbm9zY3JpcHQ+CgoJPGRpdiBpZD0iY29va2llRGlzYWJsZWRXYXJuaW5nIiBjbGFzcz0iZXJyb3JNZXNzYWdlQmxvY2siIHN0eWxlPSJkaXNwbGF5OiBub25lIj5Db29raWVzIGFyZSBkaXNhYmxlZCBpbiB5b3VyIGludGVybmV0IGJyb3dzZXIuIFBsZWFzZSBlbmFibGUgQ29va2llcyBpbiBvcmRlciB0byB1c2UgdGhlIGVzc2VudGlhbCBmZWF0dXJlcyBvZiB0aGlzIHdlYnNpdGUsIG90aGVyd2lzZSBpdCB3aWxsIGJlIHVuYWJsZSB0byB3b3JrIHByb3Blcmx5LjwvZGl2PgoJPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgoJCWlmICghd2luZG93Lm5hdmlnYXRvci5jb29raWVFbmFibGVkIHx8IGRvY3VtZW50LmNvb2tpZT09JycpCgkJewoJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiY29va2llRGlzYWJsZWRXYXJuaW5nIikuc3R5bGUuZGlzcGxheT0iYmxvY2siOwoJCX0KCTwvc2NyaXB0PgkKCQoJPHA+V2VsY29tZSB0byB0aGUgPD9waHAgZWNobyAkcHJvZHVjdF9uYW1lOyA/PiBpbnN0YWxsZXIsIGFuZCB0aGFuayB5b3UgdmVyeSBtdWNoIGZvciBjaG9vc2luZyB0aGUgPD9waHAgZWNobyAkcHJvZHVjdF9uYW1lOyA/PiBDbGFzc2lmaWVkIFNjcmlwdC4gT3VyIGdvYWwgaXMgdG8gcHJvdmlkZSB0aGUgbW9zdCB2ZXJzYXRpbGUsIGZsZXhpYmxlIGFuZCBlYXN5LXRvLXVzZSBjbGFzc2lmaWVkIHNjcmlwdCBmb3IgeW91ciBvbmxpbmUgYnVzaW5lc3MuPC9wPgoJPHA+VGhpcyBzY3JpcHQgd2lsbCBoZWxwIHlvdSBpbnN0YWxsIDw/cGhwIGVjaG8gJHByb2R1Y3RfbmFtZTsgPz4gcXVpY2tseSBhbmQgZWZmb3J0bGVzc2x5LjwvcD4KCTxwPlNvbWUgb2YgdGhlIHN0ZXBzIHdpbGwgcmVxdWlyZSB5b3VyIGlucHV0cywgd2hpbGUgb3RoZXJzIHdpbGwgYmUgcGVyZm9ybWVkIGF1dG9tYXRpY2FsbHkuPC9wPgoJPHA+QWxsIHlvdSBuZWVkIHRvIGRvIGlzIGZvbGxvdyB0aGUgZ3VpZGVsaW5lcywgYW5kIGlmIGluIGRvdWJ0LCBjb25zdWx0IHRoZSA8YSBvbmNsaWNrPSJqYXZhc2NyaXB0OndpbmRvdy5vcGVuKHRoaXMuaHJlZiwgJ19ibGFuaycpOyByZXR1cm4gZmFsc2U7IiBocmVmPSI8P3BocCBlY2hvICRzaXRlX3VybDsgPz4vZG9jL1VzZXJNYW51YWwvbWFudWFsX2luc3RhbGxhdGlvbi5odG0iPkluc3RhbGxhdGlvbiBNYW51YWw8L2E+LiA8L3A+Cgk8cD5UaGUgY29udGVudHMgb2YgdGhlIGluc3RhbGwgbG9nIGF0IHRoZSBsb3dlciBwYXJ0IG9mIHRoZSBwYWdlIHNob3VsZCBhY2NvbXBhbnkgYW55IHN1cHBvcnQgcmVxdWVzdHMgYXNzb2NpYXRlZCB3aXRoIHRoZSBpbnN0YWxsYXRpb24uPC9wPgo8L2Rpdj4=',
);$config = array (
  'build' => 
  array (
    'Welcome' => 
    array (
      'DisplayTemplate' => 
      array (
        'templateFileName' => 'welcome_page.tpl',
        'waitForConfirmation' => '1',
      ),
      'caption' => 'Welcome to iLister installation script',
    ),
    'GenerateLicense' => 
    array (
      'GenerateLicense' => 
      array (
        'message' => '<p>Please enter all the information below to generate a license:</p>',
        'dataSet' => 'UserData',
      ),
      'caption' => 'Get a License',
    ),
    'PlaceLicense' => 
    array (
      'PlaceLicense' => 
      array (
        'message' => '<p>Please enter your correct FTP access details to the installation folder. License generator will automatically upload the new license to your installation folder.</p>',
        'dataSet' => 'FTPCredentials',
        'LicenseVerificationCodeMessage' => 'The email containing your trial license file and verification code has been successfully sent to your email address. Please enter the verification code from the e-mail.',
        'verificationData' => 'LicenseVerificationCode',
        'mode' => '644',
      ),
      'caption' => 'License Installation',
      'skipable' => '1',
    ),
    'checkLicense' => 
    array (
      'CheckLicense' => 
      array (
        'message' => '<p>Please place the license into the root of your installation without editing or modifying the file in any way.</p>',
        'waitForConfirmation' => '1',
      ),
      'caption' => 'Check License',
    ),
    'CheckSystemRequirements' => 
    array (
      'CheckRequirements' => 
      array (
        'requirements' => 
        array (
          0 => 
          array (
            'message' => 'The PHP version installed on your server is ${php_version}. However, iLister requires PHP version 5.4.x. Please ask your server administrator to install PHP of the required versions.',
            'min' => '5.4',
            'max' => '5.6',
            'mandatory' => '1',
            'type' => 'PhpVersion',
          ),
          1 => 
          array (
            'message' => 'The ionCube loader is not installed on your server. However, iLister requires ionCube loader to operate properly. Please ask your server administrator to install ionCube on your server.',
            'name' => 'IonCube Loader',
            'mandatory' => '1',
            'type' => 'PhpExtension',
          ),
          2 => 
          array (
            'message' => 'The PHP on your server does not have the BCMath extension enabled. However, iLister requires BCMath to operates properly. Please ask your server administrator to enable BCMath on your server.',
            'name' => 'bcmath',
            'mandatory' => '1',
            'type' => 'PhpExtension',
          ),
          3 => 
          array (
            'message' => 'The PHP on your server does not have the Imagick extension enabled. You will not be able to upload images to listings and user profiles without this extension. Please ask your server administrator to enable Imagick on your server.',
            'name' => 'Imagick',
            'mandatory' => '',
            'type' => 'PhpExtension',
          ),
          4 => 
          array (
            'message' => 'The "cURL" library is not found. PayPal requires to have this library enabled. Without it, the PayPal payment functionality will not work. Please ask your server administrator to enable cURL on your server to be able to use PayPal payment gateway.',
            'name' => 'curl',
            'mandatory' => '',
            'type' => 'PhpExtension',
          ),
          5 => 
          array (
            'message' => 'The PHP on your server has the <tt>magic_quotes</tt> setting set to "On". We recommend to set it to "Off". Please read more about "magic quotes" <a href="http://php.net/manual/en/security.magicquotes.php">here</a>. Please ask your server administrator to disable this option for your server.',
            'name' => 'magic_quotes',
            'value' => '',
            'mandatory' => '',
            'type' => 'PhpIniSetting',
          ),
          6 => 
          array (
            'message' => '
						The interface cache cannot be created.<br />
						Please copy the installation log below and <a href="http://www.worksforweb.com/company/contact-us/support-ticket/">contact our Tech Support Dept.</a> for assistance. <br />
						Please also include your FTP and DB access details in your request.
						',
            'mandatory' => '1',
            'type' => 'RebuildInterfaceCacheCheck',
          ),
          7 => 
          array (
            'message' => 'Please be informed that the timezone on your server is not specified. Please ask your hosting support to configure the timezone.',
            'mandatory' => '',
            'type' => 'PhpTimeZone',
          ),
        ),
      ),
      'caption' => 'Check system requirements',
    ),
    'ChmodDirs' => 
    array (
      'ApplyPermissionsViaFTP' => 
      array (
        'message' => '<p>The installer will need to set file and folder permissions that are secure, yet allow the proper operation of iLister.</p><p>Please provide FTP user details for user with sufficient rights to modify directory permissions to 777 or "drwxrwxrwx". After the installation, permissions will be reverted. Alternatively, you can skip this step and set the correct permissions manually.</p>',
        'dirset' => 
        array (
          0 => 
          array (
            'path' => 'cache',
            'type' => 'dir',
            'optional' => '',
          ),
          1 => 
          array (
            'path' => 'modules',
            'type' => 'dir',
            'optional' => '',
          ),
          2 => 
          array (
            'path' => 'languages',
            'type' => 'dir',
            'optional' => '',
          ),
          3 => 
          array (
            'path' => 'files',
            'type' => 'dir',
            'optional' => '',
          ),
          4 => 
          array (
            'path' => 'files/files',
            'optional' => '',
            'type' => 'dir',
          ),
          5 => 
          array (
            'path' => 'files/kcfinder',
            'optional' => '',
            'type' => 'dir',
          ),
          6 => 
          array (
            'path' => 'files/pictures',
            'optional' => '',
            'type' => 'dir',
          ),
          7 => 
          array (
            'path' => 'files/temp',
            'optional' => '',
            'type' => 'dir',
          ),
          8 => 
          array (
            'path' => 'files/video',
            'optional' => '',
            'type' => 'dir',
          ),
        ),
        'dataSet' => 'FTPCredentials',
        'mode' => '777',
      ),
      'caption' => 'Change directory permissions',
      'skipable' => '1',
    ),
    'ChmodFiles' => 
    array (
      'ApplyPermissionsViaFTP' => 
      array (
        'message' => '<p>The correct permissions protect your website from unauthorized access of the third-party scripts, which can harm your website.</p><p>Please specify an FTP user which has enough rights to change file permissions to 666 or "-rw-rw-rw-". After the installation, permissions for most files will be reverted.  Alternatively, you can skip this step and set the correct permissions manually.</p>',
        'fileset' => 
        array (
          0 => 
          array (
            'path' => 'taskscheduler.log',
            'type' => 'file',
            'optional' => '',
          ),
          1 => 
          array (
            'path' => '.htaccess',
            'type' => 'file',
            'optional' => '',
          ),
          2 => 
          array (
            'path' => 'admin/.htaccess',
            'type' => 'file',
            'optional' => '',
          ),
          3 => 
          array (
            'path' => 'apps/AdminPanel/config/local.ini',
            'type' => 'file',
            'optional' => '',
          ),
          4 => 
          array (
            'path' => 'apps/FrontEnd/config/local.ini',
            'type' => 'file',
            'optional' => '',
          ),
          5 => 
          array (
            'path' => 'apps/MobileFrontEnd/config/local.ini',
            'optional' => '1',
            'type' => 'file',
          ),
          6 => 
          array (
            'path' => 'files/pictures/watermark.gif',
            'optional' => '',
            'type' => 'file',
          ),
          7 => 
          array (
            'path' => 'languages/en.xml',
            'optional' => '',
            'type' => 'file',
          ),
          8 => 
          array (
            'path' => 'languages/ru.xml',
            'optional' => '',
            'type' => 'file',
          ),
        ),
        'dataSet' => 'FTPCredentials',
        'mode' => '666',
      ),
      'caption' => 'Change file permissions',
      'skipable' => '1',
    ),
    'SetCharacterSetToUTF8' => 
    array (
      'SetCharacterSet' => 
      array (
        'message' => '<p>Databases are used to store all the info on listings, users, plans, etc. To configure the database, please specify a database host, database name, database user and password combination in order to continue the installation.</p><p>If you have any questions on how to create or configure the database, please contact your hosting service provider\'s tech support staff. They will explain you how to create databases and assign users for them.</p>',
        'dataSet' => 'DBCredentials',
        'charset' => 'utf8',
      ),
      'caption' => 'Set database encoding to UTF8',
    ),
    'CheckLocalSettingsPermissions' => 
    array (
      'CheckFileWritable' => 
      array (
        'messages' => 
        array (
          'log' => 'Checking Local Settings Permissions',
          'failureLog' => 'Can not write to Local Settings',
          'failureMessage' => '
						
							<p>Certain configuration settings of the iLister-based website are stored in the local.ini files. These local settings include the URL of your website, the path to the Admin Panel, and the database access details. The installation script should have the rights to write these data elements to the local.ini files.</p>
							<p class="error">Please set the permissions manually so that PHP can write to these files and proceed with the installation by clicking "Retry".</p>
						
					',
          'failureLogType' => 'warning',
        ),
        'fileset' => 
        array (
          0 => 
          array (
            'path' => 'apps/AdminPanel/config/local.ini',
            'type' => 'file',
            'optional' => '',
          ),
          1 => 
          array (
            'path' => 'apps/FrontEnd/config/local.ini',
            'type' => 'file',
            'optional' => '',
          ),
          2 => 
          array (
            'path' => 'apps/MobileFrontEnd/config/local.ini',
            'optional' => '1',
            'type' => 'file',
          ),
        ),
      ),
      'caption' => 'Checking local settings permissions',
    ),
    'DefineLocalSettings' => 
    array (
      'DefineLocalSettings' => 
      array (
        'dataSet' => 'DBCredentials',
        'ftpDataSet' => 'FTPCredentials',
        'charset' => 'utf8',
      ),
      'caption' => 'Define local settings',
    ),
    'CheckCacheDirPermission' => 
    array (
      'CheckFileWritable' => 
      array (
        'messages' => 
        array (
          'log' => 'Checking Cache Directory Permissions',
          'failureLog' => 'Cannot write to Cache Directory',
          'failureMessage' => '
					<p class="error">The items listed below require writable permissions. Please set the permissions manually so that PHP can write to these files and proceed with the installation by clicking "Retry".</p>
					',
          'failureLogType' => 'warning',
        ),
        'dirset' => 
        array (
          0 => 
          array (
            'path' => 'cache',
            'type' => 'dir',
            'optional' => '',
          ),
        ),
      ),
      'caption' => 'Checking cache directory permissions',
    ),
    'InstallProductDBByRequestingFrontEnd' => 
    array (
      'RequestFrontEnd' => 
      array (
        'failureMessage' => '
					
					    This step was not performed correctly due to one of the following causes:
						<ul>
							<li>PHP memory limit is set too low (256MB or better would work fine).</li>
							<li>The db for iLister installation should be empty with no tables.</li>
							<li>The db user should be granted ALL permissions to manage the db.</li>
						</ul>
						In case all of the above is in place, but the installation does not proceed further,
						please copy the installation log below and <a href="http://www.worksforweb.com/company/contact-us/support-ticket/">contact our Tech Support Dept.</a> for assistance. <br />
						Please also include your FTP and DB access details in your request.
					
				',
      ),
      'caption' => 'Setup environment, cache & DB tables',
    ),
    'DefineAdminCredentials' => 
    array (
      'DefineAdminCredentials' => 
      array (
        'message' => '
				<p>The "system email" is the email address that the website uses as the “FROM” address to dispatch notification emails to users and the website administrator.</p>
				<p>As for admin username and password, we recommend that you choose a non-standard admin username and a strong password of no less than 8 symbols long, containing at least one capital letter, one digit, and one symbol.</p>
				',
        'dbDataSet' => 'DBCredentials',
        'dataSet' => 'AdminCredentials',
      ),
      'caption' => 'Set admin login and password',
    ),
    'CheckHtaccessPermissions' => 
    array (
      'CheckFileWritable' => 
      array (
        'messages' => 
        array (
          'log' => 'Checking .htaccess Permissions',
          'failureLog' => 'Can not write to .htaccess',
          'failureMessage' => '<p class="error">The items listed below require writable permissions. Please set the permissions manually so that PHP can write to these files and proceed with the installation by clicking "Retry".</p>',
          'failureLogType' => 'warning',
        ),
        'fileset' => 
        array (
          0 => 
          array (
            'path' => '.htaccess',
            'type' => 'file',
            'optional' => '',
          ),
          1 => 
          array (
            'path' => 'admin/.htaccess',
            'type' => 'file',
            'optional' => '',
          ),
          2 => 
          array (
            'path' => 'm/.htaccess',
            'optional' => '1',
            'type' => 'file',
          ),
        ),
      ),
      'caption' => 'Checking .htaccess permissions',
    ),
    'WriteHtaccessForFrontEnd' => 
    array (
      'WriteHtaccess' => 
      array (
        'pathToHtaccess' => '/',
      ),
      'caption' => 'Write .htaccess file for the Front End',
    ),
    'WriteHtaccessForAdminPanel' => 
    array (
      'WriteHtaccess' => 
      array (
        'pathToHtaccess' => '/admin/',
      ),
      'caption' => 'Write .htaccess file for the Admin Panel',
    ),
    'DenyWriteAccessToConfigFiles' => 
    array (
      'ApplyPermissionsViaFTP' => 
      array (
        'message' => 'The configuration files contain access details to the website database. It is necessary to change the permissions to 644 (not writable) for the configuration files in order to prevent an unauthorized access to the website data.',
        'fileset' => 
        array (
          0 => 
          array (
            'path' => '.htaccess',
            'type' => 'file',
            'optional' => '',
          ),
          1 => 
          array (
            'path' => 'admin/.htaccess',
            'type' => 'file',
            'optional' => '',
          ),
          2 => 
          array (
            'path' => 'apps/AdminPanel/config/local.ini',
            'type' => 'file',
            'optional' => '',
          ),
          3 => 
          array (
            'path' => 'apps/FrontEnd/config/local.ini',
            'type' => 'file',
            'optional' => '',
          ),
          4 => 
          array (
            'path' => 'apps/MobileFrontEnd/config/local.ini',
            'optional' => '1',
            'type' => 'file',
          ),
        ),
        'dataSet' => 'FTPCredentials',
        'mode' => '644',
      ),
      'caption' => 'Deny write access to config files',
      'skipable' => '1',
    ),
    'CheckPermissionsForSecurity' => 
    array (
      'CheckFilePermission' => 
      array (
        'messages' => 
        array (
          'log' => 'Checking Config File Permissions',
          'failureLog' => 'Current Config File Permissions are not recomended for security purposes.',
          'failureMessage' => '<p class="error">For security purposes, please set the permissions to ${expectedPermissionMode} for the items listed below and then proceed with the installation by clicking "Retry". Alternatively, you can skip this step by clicking "Next".</p>',
          'failureLogType' => 'warning',
        ),
        'fileset' => 
        array (
          0 => 
          array (
            'path' => '.htaccess',
            'type' => 'file',
            'optional' => '',
          ),
          1 => 
          array (
            'path' => 'admin/.htaccess',
            'type' => 'file',
            'optional' => '',
          ),
          2 => 
          array (
            'path' => 'apps/AdminPanel/config/local.ini',
            'type' => 'file',
            'optional' => '',
          ),
          3 => 
          array (
            'path' => 'apps/FrontEnd/config/local.ini',
            'type' => 'file',
            'optional' => '',
          ),
          4 => 
          array (
            'path' => 'apps/MobileFrontEnd/config/local.ini',
            'optional' => '1',
            'type' => 'file',
          ),
        ),
        'expectedMode' => '644',
        'skipable' => '1',
      ),
      'caption' => 'Checking config files permissions',
    ),
    'CheckDirectoryPermissions' => 
    array (
      'CheckFileWritable' => 
      array (
        'messages' => 
        array (
          'log' => 'Checking Cache Directory Permissions',
          'failureLog' => 'Cannot write to directories',
          'failureMessage' => '<p class="error">The items listed below require writable permissions. Please set the permissions manually so that PHP can write to these files and proceed with the installation by clicking "Retry".</p>',
          'failureLogType' => 'warning',
        ),
        'dirset' => 
        array (
          0 => 
          array (
            'path' => 'cache',
            'type' => 'dir',
            'optional' => '',
          ),
          1 => 
          array (
            'path' => 'modules',
            'type' => 'dir',
            'optional' => '',
          ),
          2 => 
          array (
            'path' => 'languages',
            'type' => 'dir',
            'optional' => '',
          ),
          3 => 
          array (
            'path' => 'files',
            'type' => 'dir',
            'optional' => '',
          ),
          4 => 
          array (
            'path' => 'files/files',
            'optional' => '',
            'type' => 'dir',
          ),
          5 => 
          array (
            'path' => 'files/kcfinder',
            'optional' => '',
            'type' => 'dir',
          ),
          6 => 
          array (
            'path' => 'files/pictures',
            'optional' => '',
            'type' => 'dir',
          ),
          7 => 
          array (
            'path' => 'files/temp',
            'optional' => '',
            'type' => 'dir',
          ),
          8 => 
          array (
            'path' => 'files/video',
            'optional' => '',
            'type' => 'dir',
          ),
        ),
      ),
      'caption' => 'Checking directories permissions',
    ),
    'InstallAllModules' => 
    array (
      'InstallAllModules' => 
      array (
        'adminDataSet' => 'AdminCredentials',
      ),
      'caption' => 'Install modules',
    ),
    'ShowInstallationSuccessMessage' => 
    array (
      'DisplayTemplate' => 
      array (
        'log' => 
        array (
          'message' => 'Congratulations! The installation was completed successfully!',
          'type' => 'success',
        ),
        'templateFileName' => 'installation_success.tpl',
      ),
      'caption' => 'Complete installation',
    ),
  ),
  'forms' => 
  array (
    'UserData' => 
    array (
      'fields' => 
      array (
        'first_name' => 
        array (
          'caption' => 'First Name',
          'type' => 'text',
          'default' => '',
        ),
        'last_name' => 
        array (
          'caption' => 'Last Name',
          'type' => 'text',
          'default' => '',
        ),
        'email' => 
        array (
          'caption' => 'Email',
          'type' => 'text',
          'default' => '',
        ),
        'subscription_accepted' => 
        array (
          'caption' => 'I agree to be informed of new products and events via my email',
          'type' => 'checkbox',
          'default' => '0',
        ),
        'terms_agree' => 
        array (
          'caption' => 'I have read and agreed to the terms of the relevant iAuto, iRealty or iLister',
          'type' => 'checkbox',
          'default' => '0',
        ),
      ),
      'caption' => 'Get a License',
      'validator' => 'UserData',
      'templateFileName' => 'get_license_form.tpl',
    ),
    'LicenseVerificationCode' => 
    array (
      'fields' => 
      array (
        'code' => 
        array (
          'caption' => 'Verification Code',
          'type' => 'text',
          'default' => '',
        ),
      ),
      'caption' => 'Verification Code',
      'validator' => 'LicenseVerificationCode',
    ),
    'DBCredentials' => 
    array (
      'fields' => 
      array (
        'dbHost' => 
        array (
          'caption' => 'DB Host',
          'type' => 'text',
          'default' => 'localhost',
        ),
        'dbUser' => 
        array (
          'caption' => 'DB User',
          'type' => 'text',
          'default' => '',
        ),
        'dbPassword' => 
        array (
          'caption' => 'DB Password',
          'type' => 'text',
          'default' => '',
        ),
        'dbName' => 
        array (
          'caption' => 'DB Name',
          'type' => 'text',
          'default' => '',
        ),
      ),
      'caption' => 'Database Details',
      'validator' => 'DBCredentials',
    ),
    'FTPCredentials' => 
    array (
      'fields' => 
      array (
        'ftpHost' => 
        array (
          'caption' => 'FTP Host',
          'type' => 'text',
          'default' => 'localhost',
        ),
        'ftpPort' => 
        array (
          'caption' => 'FTP Port',
          'type' => 'text',
          'default' => '21',
        ),
        'ftpUser' => 
        array (
          'caption' => 'FTP User',
          'type' => 'text',
          'default' => '',
        ),
        'ftpPassword' => 
        array (
          'caption' => 'FTP Password',
          'type' => 'text',
          'default' => '',
        ),
        'ftpDirectory' => 
        array (
          'caption' => 'FTP Directory',
          'type' => 'text',
          'default' => 'php_function:getcwd',
        ),
      ),
      'caption' => 'FTP Access Details',
      'validator' => 'FTPCredentials',
    ),
    'AdminCredentials' => 
    array (
      'fields' => 
      array (
        'adminUsername' => 
        array (
          'caption' => 'Admin Username',
          'type' => 'text',
          'default' => '',
        ),
        'adminPassword' => 
        array (
          'caption' => 'Admin Password',
          'type' => 'text',
          'default' => '',
        ),
        'systemEmail' => 
        array (
          'caption' => 'System Email',
          'type' => 'text',
          'default' => '',
        ),
      ),
      'caption' => 'Admin Login and Password',
      'validator' => 'AdminCredentials',
    ),
    'MFAUrl' => 
    array (
      'fields' => 
      array (
        'url' => 
        array (
          'caption' => 'Url',
          'type' => 'text',
          'default' => '',
        ),
      ),
      'caption' => 'Mobile FrontEnd Url',
      'validator' => 'MFAUrl',
    ),
  ),
  'product' => 'iLister',
  'version' => '7.5.0',
  'remoteLogHandlerUrl' => 'http://license.worksforweb.com/system/installations/log_install/',
  'licenseWorksforweb' => 'http://license.worksforweb.com/',
); $installer = Installer::getInstance(); $installer->init($config); $installer->run(); }namespace
{
	function d()
	{
		$args = func_get_args();
		$die = (count($args) > 1 && end($args) === 1) && array_pop($args);
		echo "<pre>";
		$backtrace = debug_backtrace();
		echo "<strong>{$backtrace[0]['file']}:{$backtrace[0]['line']}</strong>\n";
		foreach($args as $v)
		{
			$output = print_r($v, true);
			echo $output . "\n";
		}
		echo "</pre>";
		if ($die) die();
	}

	function dd()
	{
		$args = func_get_args();
		$die = (end($args) === 1) && array_pop($args);
		echo "<pre>";
		$backtrace = debug_backtrace();
		echo "<strong>{$backtrace[0]['file']}:{$backtrace[0]['line']}</strong>\n";
		foreach($args as $v)
		{
			var_dump($v);
			echo "\n";
		}
		echo "</pre>";
		if ($die) die();
	}
}